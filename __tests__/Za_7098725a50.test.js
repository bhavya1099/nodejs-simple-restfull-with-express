// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Za_7e62259a97
ROOST_METHOD_SIG_HASH=Za_7098725a50


*/

// ********RoostGPT********
const { Za } = require('../../../src/public/javascripts/library/angular.min.js');

describe('Za function', () => {
  let zaInstance;

  beforeEach(() => {
    zaInstance = new Za({}, true);
  });

  test('should initialize with nextUid function when second parameter is true', () => {
    expect(typeof zaInstance.nextUid).toBe('function');
  });

  test('nextUid should return incremental values', () => {
    expect(zaInstance.nextUid()).toBe(1);
    expect(zaInstance.nextUid()).toBe(2);
    expect(zaInstance.nextUid()).toBe(3);
  });

  test('should not have nextUid function when second parameter is false', () => {
    const zaInstanceWithoutUid = new Za({}, false);
    expect(zaInstanceWithoutUid.nextUid).toBeUndefined();
  });

  test('should not have nextUid function when second parameter is omitted', () => {
    const zaInstanceWithoutUid = new Za({});
    expect(zaInstanceWithoutUid.nextUid).toBeUndefined();
  });

  test('should call q function with correct parameters', () => {
    const mockQ = jest.fn();
    global.q = mockQ;
    const mockObject = {};
    new Za(mockObject, true);
    expect(mockQ).toHaveBeenCalledWith(mockObject, expect.any(Function));
  });

  test('should bind this.put as the second argument to q', () => {
    const mockQ = jest.fn();
    global.q = mockQ;
    const mockObject = {};
    const zaInstance = new Za(mockObject, true);
    expect(mockQ.mock.calls[0][1]).toBe(zaInstance.put);
  });
});
