// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Qa_339d40b960
ROOST_METHOD_SIG_HASH=Qa_b2613fd6f6


*/

// ********RoostGPT********
const { Qa } = require('../src/public/javascripts/library/angular.min.js');

describe('Qa function', () => {
  let mockArray;
  let mockPa;

  beforeEach(() => {
    mockArray = [1, 2, 3, 4, 5];
    mockPa = jest.fn();
    global.Pa = mockPa;
  });

  test('should remove element from array if found', () => {
    mockPa.mockReturnValue(2);
    const result = Qa(mockArray, 3);
    expect(mockArray).toEqual([1, 2, 4, 5]);
    expect(result).toBe(3);
  });

  test('should not modify array if element not found', () => {
    mockPa.mockReturnValue(-1);
    const result = Qa(mockArray, 6);
    expect(mockArray).toEqual([1, 2, 3, 4, 5]);
    expect(result).toBe(6);
  });

  test('should handle empty array', () => {
    mockPa.mockReturnValue(-1);
    const emptyArray = [];
    const result = Qa(emptyArray, 1);
    expect(emptyArray).toEqual([]);
    expect(result).toBe(1);
  });

  test('should handle array with one element', () => {
    mockPa.mockReturnValue(0);
    const singleElementArray = [1];
    const result = Qa(singleElementArray, 1);
    expect(singleElementArray).toEqual([]);
    expect(result).toBe(1);
  });

  test('should handle array with duplicate elements', () => {
    mockArray = [1, 2, 2, 3, 4];
    mockPa.mockReturnValue(1);
    const result = Qa(mockArray, 2);
    expect(mockArray).toEqual([1, 2, 3, 4]);
    expect(result).toBe(2);
  });

  test('should handle non-primitive elements', () => {
    const obj1 = { id: 1 };
    const obj2 = { id: 2 };
    mockArray = [obj1, obj2];
    mockPa.mockReturnValue(1);
    const result = Qa(mockArray, obj2);
    expect(mockArray).toEqual([obj1]);
    expect(result).toBe(obj2);
  });

  test('should call Pa function with correct arguments', () => {
    Qa(mockArray, 3);
    expect(mockPa).toHaveBeenCalledWith(mockArray, 3);
  });

  test('should handle large arrays', () => {
    mockArray = Array.from({ length: 1000 }, (_, i) => i + 1);
    mockPa.mockReturnValue(500);
    const result = Qa(mockArray, 501);
    expect(mockArray.length).toBe(999);
    expect(result).toBe(501);
  });

  test('should handle undefined input', () => {
    mockPa.mockReturnValue(-1);
    const result = Qa(undefined, 1);
    expect(result).toBe(1);
  });

  test('should handle null input', () => {
    mockPa.mockReturnValue(-1);
    const result = Qa(null, 1);
    expect(result).toBe(1);
  });
});
