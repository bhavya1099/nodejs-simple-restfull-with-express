// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Bb_c7bea8c992
ROOST_METHOD_SIG_HASH=Bb_14dc708344


*/

// ********RoostGPT********
const Bb = require('../../../src/public/javascripts/library/angular.min.js').Bb;

describe('Bb function', () => {
  test('should return the input when it is truthy', () => {
    expect(Bb(true, 'test', 'required')).toBe(true);
    expect(Bb(1, 'test', 'required')).toBe(1);
    expect(Bb('string', 'test', 'required')).toBe('string');
    expect(Bb({}, 'test', 'required')).toEqual({});
    expect(Bb([], 'test', 'required')).toEqual([]);
  });

  test('should throw an error when input is falsy', () => {
    expect(() => Bb(false, 'test', 'required')).toThrow();
    expect(() => Bb(null, 'test', 'required')).toThrow();
    expect(() => Bb(undefined, 'test', 'required')).toThrow();
    expect(() => Bb(0, 'test', 'required')).toThrow();
    expect(() => Bb('', 'test', 'required')).toThrow();
  });

  test('should include the second parameter in the error message if provided', () => {
    expect(() => Bb(false, 'testParam')).toThrow(/testParam/);
  });

  test('should use "?" in the error message if second parameter is not provided', () => {
    expect(() => Bb(false)).toThrow(/\?/);
  });

  test('should include the third parameter in the error message if provided', () => {
    expect(() => Bb(false, 'testParam', 'testRequired')).toThrow(/testRequired/);
  });

  test('should use "required" in the error message if third parameter is not provided', () => {
    expect(() => Bb(false, 'testParam')).toThrow(/required/);
  });

  test('should work with complex objects', () => {
    const complexObject = { key: 'value' };
    expect(Bb(complexObject, 'test', 'required')).toBe(complexObject);
  });

  test('should work with functions', () => {
    const testFunction = () => {};
    expect(Bb(testFunction, 'test', 'required')).toBe(testFunction);
  });

  test('should throw for NaN', () => {
    expect(() => Bb(NaN, 'test', 'required')).toThrow();
  });
});
