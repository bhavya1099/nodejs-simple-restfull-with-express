// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Xc_8e987a6725
ROOST_METHOD_SIG_HASH=Xc_51bd7fbe9a


*/

// ********RoostGPT********
const { Xc } = require('../src/public/javascripts/library/angular.min.js');

describe('Xc function', () => {
  let mockDocument;
  let mockElement;
  let mockCallback;

  beforeEach(() => {
    mockDocument = {
      getElementById: jest.fn(),
      querySelectorAll: jest.fn(),
    };
    mockElement = {
      className: '',
      attributes: [],
    };
    mockCallback = jest.fn();
  });

  test('should call callback with element and empty array when ng-app is found in class', () => {
    mockElement.className = 'ng-app';
    mockDocument.getElementById.mockReturnValue(mockElement);

    Xc(mockDocument, mockCallback);

    expect(mockCallback).toHaveBeenCalledWith(mockElement, []);
  });

  test('should call callback with element and app name when ng-app with name is found in class', () => {
    mockElement.className = 'ng-app: myApp';
    mockDocument.getElementById.mockReturnValue(mockElement);

    Xc(mockDocument, mockCallback);

    expect(mockCallback).toHaveBeenCalledWith(mockElement, ['myApp']);
  });

  test('should call callback with element and empty array when ng-app is found in attribute', () => {
    mockElement.attributes.push({ name: 'ng-app', value: '' });
    mockDocument.getElementById.mockReturnValue(mockElement);

    Xc(mockDocument, mockCallback);

    expect(mockCallback).toHaveBeenCalledWith(mockElement, []);
  });

  test('should call callback with element and app name when ng-app with name is found in attribute', () => {
    mockElement.attributes.push({ name: 'ng-app', value: 'myApp' });
    mockDocument.getElementById.mockReturnValue(mockElement);

    Xc(mockDocument, mockCallback);

    expect(mockCallback).toHaveBeenCalledWith(mockElement, ['myApp']);
  });

  test('should search for ng-app in various formats', () => {
    mockDocument.querySelectorAll.mockReturnValue([]);

    Xc(mockDocument, mockCallback);

    expect(mockDocument.querySelectorAll).toHaveBeenCalledWith('.ng\\:app');
    expect(mockDocument.querySelectorAll).toHaveBeenCalledWith('.ng-app');
    expect(mockDocument.querySelectorAll).toHaveBeenCalledWith('.x-ng-app');
    expect(mockDocument.querySelectorAll).toHaveBeenCalledWith('.data-ng-app');
  });

  test('should not call callback when no ng-app is found', () => {
    mockDocument.getElementById.mockReturnValue(null);
    mockDocument.querySelectorAll.mockReturnValue([]);

    Xc(mockDocument, mockCallback);

    expect(mockCallback).not.toHaveBeenCalled();
  });

  test('should handle multiple ng-app declarations and use the first one', () => {
    const mockElement1 = { className: 'ng-app: app1' };
    const mockElement2 = { className: 'ng-app: app2' };
    mockDocument.querySelectorAll.mockReturnValue([mockElement1, mockElement2]);

    Xc(mockDocument, mockCallback);

    expect(mockCallback).toHaveBeenCalledWith(mockElement1, ['app1']);
    expect(mockCallback).toHaveBeenCalledTimes(1);
  });
});
