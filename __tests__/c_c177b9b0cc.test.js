// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=c_9ed3e7b571
ROOST_METHOD_SIG_HASH=c_c177b9b0cc


*/

// ********RoostGPT********
const { c } = require('../../../src/public/javascripts/library/angular-resource.min.js');

describe('c function', () => {
  test('should create an object with template and defaults properties', () => {
    const template = 'test-template';
    const defaults = { key: 'value' };
    const result = new c(template, defaults);

    expect(result.template).toBe(template);
    expect(result.defaults).toEqual(defaults);
    expect(result.urlParams).toEqual({});
  });

  test('should create an object with template and empty defaults if not provided', () => {
    const template = 'test-template';
    const result = new c(template);

    expect(result.template).toBe(template);
    expect(result.defaults).toEqual({});
    expect(result.urlParams).toEqual({});
  });

  test('should create an object with undefined template and empty defaults if no arguments provided', () => {
    const result = new c();

    expect(result.template).toBeUndefined();
    expect(result.defaults).toEqual({});
    expect(result.urlParams).toEqual({});
  });

  test('should handle non-string template', () => {
    const template = 123;
    const result = new c(template);

    expect(result.template).toBe(template);
    expect(result.defaults).toEqual({});
    expect(result.urlParams).toEqual({});
  });

  test('should handle non-object defaults', () => {
    const template = 'test-template';
    const defaults = 'invalid-defaults';
    const result = new c(template, defaults);

    expect(result.template).toBe(template);
    expect(result.defaults).toBe(defaults);
    expect(result.urlParams).toEqual({});
  });
});
