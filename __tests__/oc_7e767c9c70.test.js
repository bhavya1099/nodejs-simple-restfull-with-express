// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=oc_7edf929e2f
ROOST_METHOD_SIG_HASH=oc_7e767c9c70


*/

// ********RoostGPT********
const oc = require('../../../src/public/javascripts/library/angular.min.js').oc;

describe('oc function', () => {
  let mockElement;

  beforeEach(() => {
    mockElement = document.createElement('div');
  });

  test('should remove all child nodes from the given element', () => {
    mockElement.innerHTML = '<p>Child 1</p><span>Child 2</span><div>Child 3</div>';
    oc(mockElement);
    expect(mockElement.childNodes.length).toBe(0);
  });

  test('should handle an element with no child nodes', () => {
    oc(mockElement);
    expect(mockElement.childNodes.length).toBe(0);
  });

  test('should handle an element with nested child nodes', () => {
    mockElement.innerHTML = '<div><p>Nested Child</p></div><span>Child</span>';
    oc(mockElement);
    expect(mockElement.childNodes.length).toBe(0);
  });

  test('should call Ia function for each child node', () => {
    const mockIa = jest.fn();
    global.Ia = mockIa;

    mockElement.innerHTML = '<p></p><span></span>';
    oc(mockElement);

    expect(mockIa).toHaveBeenCalledTimes(2);
    expect(mockIa).toHaveBeenCalledWith(mockElement.childNodes[0]);
    expect(mockIa).toHaveBeenCalledWith(mockElement.childNodes[1]);
  });

  test('should call removeChild for each child node', () => {
    mockElement.innerHTML = '<p></p><span></span>';
    const removeChildSpy = jest.spyOn(mockElement, 'removeChild');

    oc(mockElement);

    expect(removeChildSpy).toHaveBeenCalledTimes(2);
  });

  test('should handle text nodes', () => {
    mockElement.innerHTML = 'Text Node';
    oc(mockElement);
    expect(mockElement.childNodes.length).toBe(0);
  });

  test('should handle comment nodes', () => {
    mockElement.innerHTML = '<!-- Comment Node -->';
    oc(mockElement);
    expect(mockElement.childNodes.length).toBe(0);
  });

  test('should handle mixed node types', () => {
    mockElement.innerHTML = '<p>Text</p><!-- Comment --><span>More text</span>';
    oc(mockElement);
    expect(mockElement.childNodes.length).toBe(0);
  });
});
