// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Xb_9c944e9226
ROOST_METHOD_SIG_HASH=Xb_9903a6ea2e


*/

// ********RoostGPT********
const angular = require('../../../src/public/javascripts/library/angular.min.js');

describe('Xb function', () => {
  let Xb;

  beforeAll(() => {
    Xb = angular.Xb;
  });

  test('should add $hashKey when second parameter is provided', () => {
    const obj = {};
    const hashKey = 'testHashKey';
    Xb(obj, hashKey);
    expect(obj.$hashKey).toBe(hashKey);
  });

  test('should delete $hashKey when second parameter is not provided', () => {
    const obj = { $hashKey: 'existingHashKey' };
    Xb(obj);
    expect(obj.$hashKey).toBeUndefined();
  });

  test('should not modify other properties of the object', () => {
    const obj = { existingProp: 'value' };
    const hashKey = 'newHashKey';
    Xb(obj, hashKey);
    expect(obj.existingProp).toBe('value');
    expect(obj.$hashKey).toBe(hashKey);
  });

  test('should handle null or undefined as first parameter', () => {
    expect(() => Xb(null, 'hashKey')).not.toThrow();
    expect(() => Xb(undefined, 'hashKey')).not.toThrow();
  });

  test('should handle non-object types as first parameter', () => {
    const str = 'test';
    const num = 42;
    Xb(str, 'hashKey');
    Xb(num, 'hashKey');
    expect(str.$hashKey).toBeUndefined();
    expect(num.$hashKey).toBeUndefined();
  });

  test('should overwrite existing $hashKey if new one is provided', () => {
    const obj = { $hashKey: 'oldHashKey' };
    const newHashKey = 'newHashKey';
    Xb(obj, newHashKey);
    expect(obj.$hashKey).toBe(newHashKey);
  });

  test('should not add $hashKey if second parameter is falsy', () => {
    const obj = {};
    Xb(obj, null);
    expect(obj.$hashKey).toBeUndefined();
    Xb(obj, undefined);
    expect(obj.$hashKey).toBeUndefined();
    Xb(obj, '');
    expect(obj.$hashKey).toBeUndefined();
    Xb(obj, 0);
    expect(obj.$hashKey).toBeUndefined();
    Xb(obj, false);
    expect(obj.$hashKey).toBeUndefined();
  });

  test('should delete $hashKey even if it does not exist', () => {
    const obj = {};
    Xb(obj);
    expect(obj.$hashKey).toBeUndefined();
  });
});
