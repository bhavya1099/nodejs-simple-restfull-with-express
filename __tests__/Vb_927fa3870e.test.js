// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Vb_07fccdc68d
ROOST_METHOD_SIG_HASH=Vb_927fa3870e


*/

// ********RoostGPT********
const angular = require('../src/public/javascripts/library/angular.min.js');

describe('Vb function', () => {
  beforeAll(() => {
    global.window = {};
    global.document = {
      querySelector: jest.fn(),
      createElement: jest.fn(),
      getElementsByTagName: jest.fn(() => []),
    };
  });

  afterAll(() => {
    delete global.window;
    delete global.document;
  });

  test('should return an empty array for an empty object', () => {
    const input = {};
    const result = angular.Vb(input);
    expect(result).toEqual([]);
  });

  test('should return sorted keys for an object with multiple properties', () => {
    const input = { c: 3, a: 1, b: 2 };
    const result = angular.Vb(input);
    expect(result).toEqual(['a', 'b', 'c']);
  });

  test('should handle objects with numeric keys', () => {
    const input = { 2: 'two', 1: 'one', 3: 'three' };
    const result = angular.Vb(input);
    expect(result).toEqual(['1', '2', '3']);
  });

  test('should handle objects with mixed string and numeric keys', () => {
    const input = { b: 'bee', 1: 'one', a: 'ay' };
    const result = angular.Vb(input);
    expect(result).toEqual(['1', 'a', 'b']);
  });

  test('should ignore inherited properties', () => {
    function Parent() {
      this.parentProp = 'parent';
    }
    Parent.prototype.protoProp = 'proto';

    function Child() {
      Parent.call(this);
      this.childProp = 'child';
    }
    Child.prototype = Object.create(Parent.prototype);

    const input = new Child();
    const result = angular.Vb(input);
    expect(result).toEqual(['childProp', 'parentProp']);
  });

  test('should handle objects with symbol keys', () => {
    const symbolKey = Symbol('test');
    const input = { [symbolKey]: 'symbol', normalKey: 'normal' };
    const result = angular.Vb(input);
    expect(result).toEqual(['normalKey']);
  });

  test('should return an empty array for non-object inputs', () => {
    expect(angular.Vb(null)).toEqual([]);
    expect(angular.Vb(undefined)).toEqual([]);
    expect(angular.Vb(42)).toEqual([]);
    expect(angular.Vb('string')).toEqual([]);
    expect(angular.Vb(true)).toEqual([]);
  });

  test('should handle objects with undefined or null values', () => {
    const input = { a: undefined, b: null, c: 'defined' };
    const result = angular.Vb(input);
    expect(result).toEqual(['a', 'b', 'c']);
  });
});
