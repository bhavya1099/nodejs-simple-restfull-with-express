// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Ea_e4875c1a3e
ROOST_METHOD_SIG_HASH=Ea_f1c8403aa9


*/

// ********RoostGPT********
const { Ea } = require('../src/public/javascripts/library/angular.min.js');

describe('Ea function', () => {
  test('should return true for valid window object', () => {
    const mockWindow = {
      document: {},
      location: {},
      alert: jest.fn(),
      setInterval: jest.fn(),
    };
    expect(Ea(mockWindow)).toBe(true);
  });

  test('should return false for object missing document', () => {
    const mockIncomplete = {
      location: {},
      alert: jest.fn(),
      setInterval: jest.fn(),
    };
    expect(Ea(mockIncomplete)).toBe(false);
  });

  test('should return false for object missing location', () => {
    const mockIncomplete = {
      document: {},
      alert: jest.fn(),
      setInterval: jest.fn(),
    };
    expect(Ea(mockIncomplete)).toBe(false);
  });

  test('should return false for object missing alert', () => {
    const mockIncomplete = {
      document: {},
      location: {},
      setInterval: jest.fn(),
    };
    expect(Ea(mockIncomplete)).toBe(false);
  });

  test('should return false for object missing setInterval', () => {
    const mockIncomplete = {
      document: {},
      location: {},
      alert: jest.fn(),
    };
    expect(Ea(mockIncomplete)).toBe(false);
  });

  test('should return false for null input', () => {
    expect(Ea(null)).toBe(false);
  });

  test('should return false for undefined input', () => {
    expect(Ea(undefined)).toBe(false);
  });

  test('should return false for non-object input', () => {
    expect(Ea('string')).toBe(false);
    expect(Ea(123)).toBe(false);
    expect(Ea(true)).toBe(false);
  });

  test('should return false for empty object', () => {
    expect(Ea({})).toBe(false);
  });

  test('should return false for object with some but not all required properties', () => {
    const partialObject = {
      document: {},
      location: {},
    };
    expect(Ea(partialObject)).toBe(false);
  });
});
