// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=A_7a62cd06b9
ROOST_METHOD_SIG_HASH=A_e5d8eb47fb


*/

// ********RoostGPT********
const { A } = require('../../../src/public/javascripts/library/angular.min.js');

describe('A function', () => {
  let mockShift, mockE, mockO, mockTemplateUrl, mockEmpty, mockGet, mockGetTrustedResourceUrl, mockZ, mockGbTest, mockX, mockAa, mockIa, mockNb, mockCa, mockU, mockSc, mockConcat, mockB, mockHtml, mockUnshift, mockH, mockQ, mockN, mockIb, mockHa, mockM, mockL, mockPush;

  beforeEach(() => {
    mockShift = jest.fn();
    mockE = jest.fn();
    mockO = jest.fn();
    mockTemplateUrl = jest.fn();
    mockEmpty = jest.fn();
    mockGet = jest.fn();
    mockGetTrustedResourceUrl = jest.fn();
    mockZ = jest.fn();
    mockGbTest = jest.fn();
    mockX = jest.fn();
    mockAa = jest.fn();
    mockIa = jest.fn();
    mockNb = jest.fn();
    mockCa = jest.fn();
    mockU = jest.fn();
    mockSc = jest.fn();
    mockConcat = jest.fn();
    mockB = jest.fn();
    mockHtml = jest.fn();
    mockUnshift = jest.fn();
    mockH = jest.fn();
    mockQ = jest.fn();
    mockN = jest.fn();
    mockIb = jest.fn();
    mockHa = jest.fn();
    mockM = jest.fn();
    mockL = jest.fn();
    mockPush = jest.fn();

    global.a = { shift: mockShift };
    global.E = mockE;
    global.O = mockO;
    global.w = { templateUrl: mockTemplateUrl };
    global.b = { empty: mockEmpty, html: mockHtml };
    global.p = { get: mockGet };
    global.u = { getTrustedResourceUrl: mockGetTrustedResourceUrl };
    global.Z = mockZ;
    global.Gb = { test: mockGbTest };
    global.x = mockX;
    global.aa = mockAa;
    global.ia = mockIa;
    global.nb = mockNb;
    global.ca = mockCa;
    global.U = mockU;
    global.sc = mockSc;
    global.z = { concat: mockConcat };
    global.B = mockB;
    global.H = mockH;
    global.q = mockQ;
    global.N = mockN;
    global.h = { shift: mockShift, push: mockPush };
    global.Ib = mockIb;
    global.ha = mockHa;
    global.M = mockM;
    global.l = mockL;
  });

  test('should handle successful template retrieval', () => {
    const mockA = [{ templateUrl: 'test.html' }];
    const mockB = [{}];
    const mockC = {};
    const mockD = {};
    const mockE = {};
    const mockG = {};
    const mockF = {};
    const mockM = {};

    mockShift.mockReturnValue({ templateUrl: 'test.html' });
    mockGet.mockReturnValue({
      success: (callback) => {
        callback('<div>Test</div>');
        return { error: jest.fn() };
      }
    });

    const result = A(mockA, mockB, mockC, mockD, mockE, mockG, mockF, mockM);

    expect(mockShift).toHaveBeenCalled();
    expect(mockE).toHaveBeenCalled();
    expect(mockGet).toHaveBeenCalled();
    expect(mockZ).toHaveBeenCalledWith('<div>Test</div>');
    expect(typeof result).toBe('function');
  });

  test('should handle template retrieval error', () => {
    const mockA = [{ templateUrl: 'test.html' }];
    const mockB = [{}];
    const mockC = {};
    const mockD = {};
    const mockE = {};
    const mockG = {};
    const mockF = {};
    const mockM = {};

    mockShift.mockReturnValue({ templateUrl: 'test.html' });
    mockGet.mockReturnValue({
      success: () => ({
        error: (callback) => {
          callback();
        }
      })
    });

    expect(() => {
      A(mockA, mockB, mockC, mockD, mockE, mockG, mockF, mockM);
    }).toThrow();
  });

  test('should handle directive with replace option', () => {
    const mockA = [{ templateUrl: 'test.html', replace: true }];
    const mockB = [{}];
    const mockC = {};
    const mockD = {};
    const mockE = {};
    const mockG = {};
    const mockF = {};
    const mockM = {};

    mockShift.mockReturnValue({ templateUrl: 'test.html', replace: true });
    mockGet.mockReturnValue({
      success: (callback) => {
        callback('<div>Test</div>');
        return { error: jest.fn() };
      }
    });
    mockGbTest.mockReturnValue(true);
    mockX.mockReturnValue([{ nodeType: 1 }]);

    const result = A(mockA, mockB, mockC, mockD, mockE, mockG, mockF, mockM);

    expect(mockNb).toHaveBeenCalled();
    expect(mockCa).toHaveBeenCalled();
    expect(typeof result).toBe('function');
  });

  test('should handle directive without replace option', () => {
    const mockA = [{ templateUrl: 'test.html' }];
    const mockB = [{}];
    const mockC = {};
    const mockD = {};
    const mockE = {};
    const mockG = {};
    const mockF = {};
    const mockM = {};

    mockShift.mockReturnValue({ templateUrl: 'test.html' });
    mockGet.mockReturnValue({
      success: (callback) => {
        callback('<div>Test</div>');
        return { error: jest.fn() };
      }
    });

    const result = A(mockA, mockB, mockC, mockD, mockE, mockG, mockF, mockM);

    expect(mockHtml).toHaveBeenCalledWith('<div>Test</div>');
    expect(typeof result).toBe('function');
  });
});
