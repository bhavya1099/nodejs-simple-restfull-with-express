// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=O_40db6b9a19
ROOST_METHOD_SIG_HASH=O_1d51fe8e3f


*/

// ********RoostGPT********
const O = function(n) {
  return typeof n === 'function';
};

describe('O function', () => {
  test('returns true for function input', () => {
    const testFunction = () => {};
    expect(O(testFunction)).toBe(true);
  });

  test('returns false for non-function input', () => {
    expect(O(123)).toBe(false);
    expect(O('string')).toBe(false);
    expect(O({})).toBe(false);
    expect(O([])).toBe(false);
    expect(O(null)).toBe(false);
    expect(O(undefined)).toBe(false);
  });

  test('returns true for arrow functions', () => {
    const arrowFunc = () => {};
    expect(O(arrowFunc)).toBe(true);
  });

  test('returns true for async functions', () => {
    const asyncFunc = async () => {};
    expect(O(asyncFunc)).toBe(true);
  });

  test('returns true for generator functions', () => {
    function* generatorFunc() {}
    expect(O(generatorFunc)).toBe(true);
  });

  test('returns true for class methods', () => {
    class TestClass {
      testMethod() {}
    }
    const instance = new TestClass();
    expect(O(instance.testMethod)).toBe(true);
  });

  test('returns true for built-in functions', () => {
    expect(O(Math.random)).toBe(true);
    expect(O(console.log)).toBe(true);
  });

  test('returns false for function-like objects', () => {
    const functionLikeObject = { call: () => {}, apply: () => {} };
    expect(O(functionLikeObject)).toBe(false);
  });

  test('handles edge cases', () => {
    expect(O(Function)).toBe(true);
    expect(O(new Function())).toBe(true);
    expect(O(Object.create(Function.prototype))).toBe(false);
  });
});
