// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=c_d6b7db09c4
ROOST_METHOD_SIG_HASH=c_15aac82fa7


*/

// ********RoostGPT********
const { c } = require('../src/public/javascripts/library/angular.min.js');

describe('c function', () => {
  test('should return the input value unchanged', () => {
    expect(c(5)).toBe(5);
    expect(c('hello')).toBe('hello');
    expect(c(true)).toBe(true);
    expect(c(null)).toBe(null);
    expect(c(undefined)).toBe(undefined);
  });

  test('should return the same object reference for objects', () => {
    const obj = { key: 'value' };
    expect(c(obj)).toBe(obj);
  });

  test('should return the same array reference for arrays', () => {
    const arr = [1, 2, 3];
    expect(c(arr)).toBe(arr);
  });

  test('should return the same function reference for functions', () => {
    const func = () => {};
    expect(c(func)).toBe(func);
  });

  test('should handle edge cases', () => {
    expect(c(0)).toBe(0);
    expect(c('')).toBe('');
    expect(c(NaN)).toBeNaN();
    expect(c(Infinity)).toBe(Infinity);
    expect(c(-Infinity)).toBe(-Infinity);
  });

  test('should work with symbols', () => {
    const symbol = Symbol('test');
    expect(c(symbol)).toBe(symbol);
  });

  test('should work with BigInt', () => {
    const bigInt = BigInt(9007199254740991);
    expect(c(bigInt)).toBe(bigInt);
  });
});
