// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=productServicesFunction_c662b6c2d1
ROOST_METHOD_SIG_HASH=productServicesFunction_94834b2c27


*/

// ********RoostGPT********
const { productServicesFunction } = require('./app-service.js');
const $resource = jest.fn();

describe("Testing product services function", () => {

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('should verify productServicesFunction has been called', () => {
    productServicesFunction($resource);
    expect($resource).toHaveBeenCalled();
  });

  test('should test the getAllProducts method', () => {
    const result = productServicesFunction($resource);
    expect(result.getAllProducts.method).toBe('GET');
  });

  test('should test the deleteProduct method', () => {
    const result = productServicesFunction($resource);
    expect(result.deleteProduct.method).toBe('DELETE');
    expect(result.deleteProduct.params.id).toBe('@id');
  });

  test('should test the updateProduct method', () => {
    const result = productServicesFunction($resource);
    expect(result.updateProduct.method).toBe('PUT');
    expect(result.updateProduct.params.id).toBe('@id');
    expect(result.updateProduct.data).toEqual({
      title: 'title',
      description: 'description',
      price: 'price'
    });
  });

  test('should test the insertProduct method', () => {
    const result = productServicesFunction($resource);
    expect(result.insertProduct.method).toBe('POST');
    expect(result.insertProduct.data).toEqual({
      title: 'title',
      description: 'description',
      price: 'price'
    });
  });

});
