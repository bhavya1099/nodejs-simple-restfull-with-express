// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Ia_1c48ff1121
ROOST_METHOD_SIG_HASH=Ia_456b3d06d9


*/

// ********RoostGPT********
const angular = require('../../../src/public/javascripts/library/angular.min.js');

describe('Ia function', () => {
  let mockKc;
  let mockChildNodes;

  beforeEach(() => {
    mockKc = jest.fn();
    global.kc = mockKc;
    mockChildNodes = [
      { childNodes: [] },
      { childNodes: [{ childNodes: [] }] },
      { childNodes: [] }
    ];
  });

  test('should call kc with the input node', () => {
    const inputNode = { childNodes: [] };
    angular.Ia(inputNode);
    expect(mockKc).toHaveBeenCalledWith(inputNode);
  });

  test('should recursively call Ia for all child nodes', () => {
    const inputNode = { childNodes: mockChildNodes };
    angular.Ia(inputNode);
    expect(mockKc).toHaveBeenCalledTimes(4);
    expect(mockKc).toHaveBeenCalledWith(inputNode);
    expect(mockKc).toHaveBeenCalledWith(mockChildNodes[0]);
    expect(mockKc).toHaveBeenCalledWith(mockChildNodes[1]);
    expect(mockKc).toHaveBeenCalledWith(mockChildNodes[1].childNodes[0]);
  });

  test('should handle nodes without childNodes property', () => {
    const inputNode = {};
    angular.Ia(inputNode);
    expect(mockKc).toHaveBeenCalledWith(inputNode);
  });

  test('should handle empty childNodes array', () => {
    const inputNode = { childNodes: [] };
    angular.Ia(inputNode);
    expect(mockKc).toHaveBeenCalledWith(inputNode);
  });

  test('should handle null input', () => {
    angular.Ia(null);
    expect(mockKc).toHaveBeenCalledWith(null);
  });

  test('should handle undefined input', () => {
    angular.Ia(undefined);
    expect(mockKc).toHaveBeenCalledWith(undefined);
  });

  test('should handle deeply nested child nodes', () => {
    const deeplyNestedNode = {
      childNodes: [
        {
          childNodes: [
            {
              childNodes: [
                { childNodes: [] }
              ]
            }
          ]
        }
      ]
    };
    angular.Ia(deeplyNestedNode);
    expect(mockKc).toHaveBeenCalledTimes(4);
  });

  test('should handle a large number of child nodes', () => {
    const largeNodeTree = { childNodes: Array(1000).fill({ childNodes: [] }) };
    angular.Ia(largeNodeTree);
    expect(mockKc).toHaveBeenCalledTimes(1001);
  });
});
