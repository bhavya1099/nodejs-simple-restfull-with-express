// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Ua_07cd850467
ROOST_METHOD_SIG_HASH=Ua_404442a81f


*/

// ********RoostGPT********
const { Ua } = require('../src/public/javascripts/library/angular.min.js');

describe('Ua function', () => {
  let mockL, mockBb, mockO;

  beforeEach(() => {
    mockL = jest.fn();
    mockBb = jest.fn();
    mockO = jest.fn(x => x);
    global.L = mockL;
    global.Bb = mockBb;
    global.O = mockO;
  });

  test('should return the last element if c is truthy and b is an array', () => {
    const b = [1, 2, 3];
    const result = Ua(b, 'a', true);
    expect(result).toBe(3);
    expect(mockL).toHaveBeenCalledWith(b);
  });

  test('should return b if c is falsy', () => {
    const b = [1, 2, 3];
    const result = Ua(b, 'a', false);
    expect(result).toBe(b);
    expect(mockL).not.toHaveBeenCalled();
  });

  test('should call Bb with O(b) and a', () => {
    const b = () => {};
    Ua(b, 'a', false);
    expect(mockBb).toHaveBeenCalledWith(b, 'a', expect.any(String));
  });

  test('should throw an error if b is not a function', () => {
    const b = {};
    expect(() => Ua(b, 'a', false)).toThrow();
    expect(mockBb).toHaveBeenCalledWith({}, 'a', expect.stringContaining('not a function'));
  });

  test('should handle null input', () => {
    expect(() => Ua(null, 'a', false)).toThrow();
  });

  test('should handle undefined input', () => {
    expect(() => Ua(undefined, 'a', false)).toThrow();
  });

  test('should work with arrow functions', () => {
    const b = () => {};
    const result = Ua(b, 'a', false);
    expect(result).toBe(b);
  });

  test('should work with regular functions', () => {
    function b() {}
    const result = Ua(b, 'a', false);
    expect(result).toBe(b);
  });

  test('should work with method shorthand', () => {
    const obj = { b() {} };
    const result = Ua(obj.b, 'a', false);
    expect(result).toBe(obj.b);
  });
});
