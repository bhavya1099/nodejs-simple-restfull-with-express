// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=b_3cde28ab11
ROOST_METHOD_SIG_HASH=b_f07019568b


*/

// ********RoostGPT********
const { b } = require('../../../src/public/javascripts/library/angular.min.js');

describe('b function', () => {
  let mockA;

  beforeEach(() => {
    mockA = {
      1: 'nodeValue',
      3: 'textContent',
      8: 'nodeValue'
    };
    global.a = mockA;
    global.D = jest.fn();
  });

  test('should return node value when D returns true', () => {
    const mockNode = { nodeType: 1, nodeValue: 'test' };
    global.D.mockReturnValue(true);
    
    const result = b(mockNode, 'newValue');
    
    expect(result).toBe('test');
  });

  test('should return empty string when D returns true and node has no corresponding property', () => {
    const mockNode = { nodeType: 5 };
    global.D.mockReturnValue(true);
    
    const result = b(mockNode, 'newValue');
    
    expect(result).toBe('');
  });

  test('should set node value and return undefined when D returns false', () => {
    const mockNode = { nodeType: 1, nodeValue: 'oldValue' };
    global.D.mockReturnValue(false);
    
    const result = b(mockNode, 'newValue');
    
    expect(result).toBeUndefined();
    expect(mockNode.nodeValue).toBe('newValue');
  });

  test('should handle text nodes correctly', () => {
    const mockNode = { nodeType: 3, textContent: 'oldText' };
    global.D.mockReturnValue(false);
    
    const result = b(mockNode, 'newText');
    
    expect(result).toBeUndefined();
    expect(mockNode.textContent).toBe('newText');
  });

  test('should handle comment nodes correctly', () => {
    const mockNode = { nodeType: 8, nodeValue: 'oldComment' };
    global.D.mockReturnValue(false);
    
    const result = b(mockNode, 'newComment');
    
    expect(result).toBeUndefined();
    expect(mockNode.nodeValue).toBe('newComment');
  });

  test('should do nothing for unsupported node types', () => {
    const mockNode = { nodeType: 9 };
    global.D.mockReturnValue(false);
    
    const result = b(mockNode, 'newValue');
    
    expect(result).toBeUndefined();
    expect(mockNode).toEqual({ nodeType: 9 });
  });

  test('should handle null or undefined nodes', () => {
    global.D.mockReturnValue(false);
    
    expect(() => b(null, 'newValue')).not.toThrow();
    expect(() => b(undefined, 'newValue')).not.toThrow();
  });

  test('should handle various types of values', () => {
    const mockNode = { nodeType: 1, nodeValue: 'oldValue' };
    global.D.mockReturnValue(false);
    
    b(mockNode, 123);
    expect(mockNode.nodeValue).toBe(123);
    
    b(mockNode, true);
    expect(mockNode.nodeValue).toBe(true);
    
    b(mockNode, { test: 'object' });
    expect(mockNode.nodeValue).toEqual({ test: 'object' });
    
    b(mockNode, [1, 2, 3]);
    expect(mockNode.nodeValue).toEqual([1, 2, 3]);
  });
});
