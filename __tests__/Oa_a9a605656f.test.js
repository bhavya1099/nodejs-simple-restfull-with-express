// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Oa_14335970c3
ROOST_METHOD_SIG_HASH=Oa_a9a605656f


*/

// ********RoostGPT********
const { Oa } = require('../../../src/public/javascripts/library/angular.min.js');

describe('Oa function', () => {
  test('should return true for Date objects', () => {
    const date = new Date();
    expect(Oa(date)).toBe(true);
  });

  test('should return false for non-Date objects', () => {
    expect(Oa({})).toBe(false);
    expect(Oa([])).toBe(false);
    expect(Oa('2023-05-15')).toBe(false);
    expect(Oa(42)).toBe(false);
    expect(Oa(null)).toBe(false);
    expect(Oa(undefined)).toBe(false);
  });

  test('should return false for Date-like objects', () => {
    const dateLike = {
      getTime: () => 1684166400000,
      toISOString: () => '2023-05-15T12:00:00.000Z'
    };
    expect(Oa(dateLike)).toBe(false);
  });

  test('should return false for invalid Date objects', () => {
    const invalidDate = new Date('invalid');
    expect(Oa(invalidDate)).toBe(true);
  });

  test('should return true for Date objects created with different constructors', () => {
    expect(Oa(new Date())).toBe(true);
    expect(Oa(new Date('2023-05-15'))).toBe(true);
    expect(Oa(new Date(1684166400000))).toBe(true);
    expect(Oa(new Date(2023, 4, 15))).toBe(true);
  });

  test('should return false for objects with custom toString methods', () => {
    const customObject = {
      toString: () => '[object Date]'
    };
    expect(Oa(customObject)).toBe(false);
  });

  test('should handle edge cases', () => {
    expect(Oa(Object.create(null))).toBe(false);
    expect(Oa(new (class extends Date {})())).toBe(true);
    expect(Oa(Object.create(Date.prototype))).toBe(false);
  });
});
