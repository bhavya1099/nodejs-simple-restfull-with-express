// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Wc_333fba430a
ROOST_METHOD_SIG_HASH=Wc_8442e79082


*/

// ********RoostGPT********
const { Wc } = require('../src/public/javascripts/library/angular.min.js');

describe('Wc function', () => {
  test('should return "$WINDOW" when input is an object and Ea(a) is true', () => {
    const mockEa = jest.fn(() => true);
    global.Ea = mockEa;
    
    const result = Wc('someString', {});
    expect(result).toBe('$WINDOW');
    expect(mockEa).toHaveBeenCalledWith({});
  });

  test('should return "$DOCUMENT" when input is V', () => {
    global.V = {};
    const result = Wc('someString', global.V);
    expect(result).toBe('$DOCUMENT');
  });

  test('should return "$SCOPE" when input has $evalAsync and $watch properties', () => {
    const scopeObj = {
      $evalAsync: jest.fn(),
      $watch: jest.fn()
    };
    const result = Wc('someString', scopeObj);
    expect(result).toBe('$SCOPE');
  });

  test('should return s when input string starts with "$"', () => {
    global.s = 'testValue';
    const result = Wc('$someString', {});
    expect(result).toBe('testValue');
  });

  test('should return the input when none of the conditions are met', () => {
    const input = { someProperty: 'someValue' };
    const result = Wc('someString', input);
    expect(result).toBe(input);
  });

  test('should handle null input', () => {
    const result = Wc('someString', null);
    expect(result).toBeNull();
  });

  test('should handle undefined input', () => {
    const result = Wc('someString', undefined);
    expect(result).toBeUndefined();
  });

  test('should handle empty string input', () => {
    const result = Wc('', {});
    expect(result).toEqual({});
  });

  test('should handle number input', () => {
    const result = Wc('someString', 42);
    expect(result).toBe(42);
  });

  test('should handle boolean input', () => {
    const result = Wc('someString', true);
    expect(result).toBe(true);
  });
});
