// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=nc_9d1063840e
ROOST_METHOD_SIG_HASH=nc_e045b8ad61


*/

// ********RoostGPT********
const { kb } = require('../../../src/public/javascripts/library/angular.min.js');

jest.mock('../../../src/public/javascripts/library/angular.min.js', () => ({
  kb: jest.fn()
}));

function nc(b, a) {
  return kb(b, `$${a || 'ngController'}Controller`);
}

describe('nc function', () => {
  beforeEach(() => {
    kb.mockClear();
  });

  test('should call kb with correct arguments when only b is provided', () => {
    const b = 'testValue';
    nc(b);
    expect(kb).toHaveBeenCalledWith(b, '$ngControllerController');
  });

  test('should call kb with correct arguments when both b and a are provided', () => {
    const b = 'testValue';
    const a = 'customController';
    nc(b, a);
    expect(kb).toHaveBeenCalledWith(b, '$customControllerController');
  });

  test('should return the result of kb function', () => {
    const mockResult = 'mockControllerResult';
    kb.mockReturnValue(mockResult);
    const result = nc('testValue');
    expect(result).toBe(mockResult);
  });

  test('should handle empty string input for b', () => {
    nc('');
    expect(kb).toHaveBeenCalledWith('', '$ngControllerController');
  });

  test('should handle null input for b', () => {
    nc(null);
    expect(kb).toHaveBeenCalledWith(null, '$ngControllerController');
  });

  test('should handle undefined input for b', () => {
    nc(undefined);
    expect(kb).toHaveBeenCalledWith(undefined, '$ngControllerController');
  });

  test('should handle number input for b', () => {
    nc(123);
    expect(kb).toHaveBeenCalledWith(123, '$ngControllerController');
  });

  test('should handle object input for b', () => {
    const obj = { key: 'value' };
    nc(obj);
    expect(kb).toHaveBeenCalledWith(obj, '$ngControllerController');
  });

  test('should handle empty string input for a', () => {
    nc('testValue', '');
    expect(kb).toHaveBeenCalledWith('testValue', '$Controller');
  });

  test('should handle null input for a', () => {
    nc('testValue', null);
    expect(kb).toHaveBeenCalledWith('testValue', '$ngControllerController');
  });

  test('should handle undefined input for a', () => {
    nc('testValue', undefined);
    expect(kb).toHaveBeenCalledWith('testValue', '$ngControllerController');
  });

  test('should handle number input for a', () => {
    nc('testValue', 123);
    expect(kb).toHaveBeenCalledWith('testValue', '$123Controller');
  });

  test('should handle object input for a', () => {
    const obj = { key: 'value' };
    nc('testValue', obj);
    expect(kb).toHaveBeenCalledWith('testValue', '$[object Object]Controller');
  });
});
