// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=pc_7fe3814e6e
ROOST_METHOD_SIG_HASH=pc_9f0b6ff569


*/

// ********RoostGPT********
const pc = require('../src/public/javascripts/library/angular.min.js').pc;

describe('pc function', () => {
  beforeAll(() => {
    global.lb = {
      'text': 'textValue',
      'number': 'numberValue',
      'email': 'emailValue'
    };
    global.qc = {
      'INPUT': true,
      'SELECT': true,
      'TEXTAREA': true
    };
  });

  test('should return correct value for lowercase input', () => {
    const node = { nodeName: 'INPUT' };
    const result = pc(node, 'text');
    expect(result).toBe('textValue');
  });

  test('should return correct value for uppercase input', () => {
    const node = { nodeName: 'SELECT' };
    const result = pc(node, 'NUMBER');
    expect(result).toBe('numberValue');
  });

  test('should return undefined for non-existent key', () => {
    const node = { nodeName: 'TEXTAREA' };
    const result = pc(node, 'date');
    expect(result).toBeUndefined();
  });

  test('should return undefined for non-matching nodeName', () => {
    const node = { nodeName: 'DIV' };
    const result = pc(node, 'email');
    expect(result).toBeUndefined();
  });

  test('should handle empty string input', () => {
    const node = { nodeName: 'INPUT' };
    const result = pc(node, '');
    expect(result).toBeUndefined();
  });

  test('should handle null input', () => {
    const node = { nodeName: 'SELECT' };
    const result = pc(node, null);
    expect(result).toBeUndefined();
  });

  test('should handle undefined input', () => {
    const node = { nodeName: 'TEXTAREA' };
    const result = pc(node, undefined);
    expect(result).toBeUndefined();
  });

  test('should handle non-string input', () => {
    const node = { nodeName: 'INPUT' };
    const result = pc(node, 123);
    expect(result).toBeUndefined();
  });

  test('should handle object input', () => {
    const node = { nodeName: 'SELECT' };
    const result = pc(node, {});
    expect(result).toBeUndefined();
  });

  test('should handle array input', () => {
    const node = { nodeName: 'TEXTAREA' };
    const result = pc(node, []);
    expect(result).toBeUndefined();
  });
});
