// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Ba_fbbeb812ad
ROOST_METHOD_SIG_HASH=Ba_1785443159


*/

// ********RoostGPT********
const Ba = require('../../../src/public/javascripts/library/angular.min.js').Ba;

describe('Ba function', () => {
  test('should throw an error when first argument is "hasOwnProperty"', () => {
    expect(() => {
      Ba('hasOwnProperty', 'someValue');
    }).toThrow('badname: someValue');
  });

  test('should not throw an error for other property names', () => {
    expect(() => {
      Ba('someOtherProperty', 'someValue');
    }).not.toThrow();
  });

  test('should handle empty string as first argument', () => {
    expect(() => {
      Ba('', 'someValue');
    }).not.toThrow();
  });

  test('should handle null as first argument', () => {
    expect(() => {
      Ba(null, 'someValue');
    }).not.toThrow();
  });

  test('should handle undefined as first argument', () => {
    expect(() => {
      Ba(undefined, 'someValue');
    }).not.toThrow();
  });

  test('should handle number as first argument', () => {
    expect(() => {
      Ba(123, 'someValue');
    }).not.toThrow();
  });

  test('should handle object as first argument', () => {
    expect(() => {
      Ba({}, 'someValue');
    }).not.toThrow();
  });

  test('should handle array as first argument', () => {
    expect(() => {
      Ba([], 'someValue');
    }).not.toThrow();
  });

  test('should handle function as first argument', () => {
    expect(() => {
      Ba(() => {}, 'someValue');
    }).not.toThrow();
  });

  test('should handle different types for second argument', () => {
    expect(() => {
      Ba('someProperty', 123);
    }).not.toThrow();

    expect(() => {
      Ba('someProperty', null);
    }).not.toThrow();

    expect(() => {
      Ba('someProperty', undefined);
    }).not.toThrow();

    expect(() => {
      Ba('someProperty', {});
    }).not.toThrow();

    expect(() => {
      Ba('someProperty', []);
    }).not.toThrow();

    expect(() => {
      Ba('someProperty', () => {});
    }).not.toThrow();
  });
});
