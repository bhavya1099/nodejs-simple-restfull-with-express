// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=ac_7f0b94408c
ROOST_METHOD_SIG_HASH=ac_49da15246f


*/

// ********RoostGPT********
const ac = require('../src/public/javascripts/library/angular.min.js').ac;

describe('ac function', () => {
  test('should decode a valid URI component', () => {
    const encoded = 'Hello%20World%21';
    const result = ac(encoded);
    expect(result).toBe('Hello World!');
  });

  test('should return undefined for undefined input', () => {
    const result = ac(undefined);
    expect(result).toBeUndefined();
  });

  test('should return null for null input', () => {
    const result = ac(null);
    expect(result).toBeNull();
  });

  test('should return empty string for empty string input', () => {
    const result = ac('');
    expect(result).toBe('');
  });

  test('should handle special characters correctly', () => {
    const encoded = '%40%23%24%25%5E%26';
    const result = ac(encoded);
    expect(result).toBe('@#$%^&');
  });

  test('should return the input as-is if it\'s not encoded', () => {
    const notEncoded = 'Hello World!';
    const result = ac(notEncoded);
    expect(result).toBe(notEncoded);
  });

  test('should throw an error for malformed URI component', () => {
    const malformed = '%E0%A4%A';
    expect(() => ac(malformed)).toThrow();
  });

  test('should handle multiple encoded components', () => {
    const multipleEncoded = 'Hello%20World%21%20How%20are%20you%3F';
    const result = ac(multipleEncoded);
    expect(result).toBe('Hello World! How are you?');
  });

  test('should handle numbers correctly', () => {
    const encoded = '42';
    const result = ac(encoded);
    expect(result).toBe('42');
  });

  test('should handle boolean values correctly', () => {
    const encoded = 'true';
    const result = ac(encoded);
    expect(result).toBe('true');
  });

  test('should handle URL-like strings', () => {
    const encoded = 'https%3A%2F%2Fexample.com%2Fpath%3Fquery%3Dvalue';
    const result = ac(encoded);
    expect(result).toBe('https://example.com/path?query=value');
  });
});
