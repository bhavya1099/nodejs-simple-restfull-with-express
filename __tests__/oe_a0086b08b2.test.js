// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=oe_62eaea43bd
ROOST_METHOD_SIG_HASH=oe_a0086b08b2


*/

// ********RoostGPT********
const { oe } = require('../src/public/javascripts/library/angular.min.js');

describe('oe function', () => {
  let mockElement;
  let mockEvent;

  beforeEach(() => {
    mockElement = {};
    mockEvent = {
      type: 'click',
      preventDefault: jest.fn(),
      stopPropagation: jest.fn(),
      target: document.createElement('div'),
    };
  });

  test('should return a function', () => {
    const result = oe(mockElement, {});
    expect(typeof result).toBe('function');
  });

  test('should add preventDefault method if not present', () => {
    delete mockEvent.preventDefault;
    const handler = oe(mockElement, {});
    handler(mockEvent);
    expect(typeof mockEvent.preventDefault).toBe('function');
    mockEvent.preventDefault();
    expect(mockEvent.returnValue).toBe(false);
  });

  test('should add stopPropagation method if not present', () => {
    delete mockEvent.stopPropagation;
    const handler = oe(mockElement, {});
    handler(mockEvent);
    expect(typeof mockEvent.stopPropagation).toBe('function');
    mockEvent.stopPropagation();
    expect(mockEvent.cancelBubble).toBe(true);
  });

  test('should set target if not present', () => {
    delete mockEvent.target;
    const handler = oe(mockElement, {});
    handler(mockEvent);
    expect(mockEvent.target).toBeDefined();
  });

  test('should call event handlers for the given event type', () => {
    const mockHandlers = {
      click: [jest.fn(), jest.fn()],
    };
    const handler = oe(mockElement, mockHandlers);
    handler(mockEvent);
    expect(mockHandlers.click[0]).toHaveBeenCalledWith(mockEvent);
    expect(mockHandlers.click[1]).toHaveBeenCalledWith(mockEvent);
  });

  test('should set isDefaultPrevented method', () => {
    const handler = oe(mockElement, {});
    handler(mockEvent);
    expect(typeof mockEvent.isDefaultPrevented).toBe('function');
    expect(mockEvent.isDefaultPrevented()).toBe(false);
    mockEvent.preventDefault();
    expect(mockEvent.isDefaultPrevented()).toBe(true);
  });

  test('should clean up event object for IE8 and below', () => {
    global.P = 8;
    const handler = oe(mockElement, {});
    handler(mockEvent);
    expect(mockEvent.preventDefault).toBeNull();
    expect(mockEvent.stopPropagation).toBeNull();
    expect(mockEvent.isDefaultPrevented).toBeNull();
    global.P = undefined;
  });

  test('should clean up event object for modern browsers', () => {
    global.P = 9;
    const handler = oe(mockElement, {});
    handler(mockEvent);
    expect(mockEvent.preventDefault).toBeUndefined();
    expect(mockEvent.stopPropagation).toBeUndefined();
    expect(mockEvent.isDefaultPrevented).toBeUndefined();
    global.P = undefined;
  });

  test('should set elem property on returned function', () => {
    const handler = oe(mockElement, {});
    expect(handler.elem).toBe(mockElement);
  });
});
