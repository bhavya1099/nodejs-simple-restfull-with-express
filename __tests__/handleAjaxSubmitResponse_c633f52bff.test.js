// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=handleAjaxSubmitResponse_2c3f83efb1
ROOST_METHOD_SIG_HASH=handleAjaxSubmitResponse_c633f52bff


*/

// ********RoostGPT********
const { handleAjaxSubmitResponse } = require('../../src/public/javascripts/custom');

// Mock the global window object
const mockWindow = {
  location: '',
};
global.window = mockWindow;

// Mock the ROOT_URL constant
global.ROOT_URL = 'http://example.com';

// Mock the handleOnErrorAjaxSubmit function
jest.mock('../../src/public/javascripts/custom', () => ({
  ...jest.requireActual('../../src/public/javascripts/custom'),
  handleOnErrorAjaxSubmit: jest.fn(),
}));

describe('handleAjaxSubmitResponse', () => {
  beforeEach(() => {
    // Reset mocks before each test
    jest.clearAllMocks();
    mockWindow.location = '';
  });

  test('should redirect to app page when response.result is true', () => {
    const response = { result: true };
    handleAjaxSubmitResponse(response);
    expect(mockWindow.location).toBe('http://example.com/app');
  });

  test('should call handleOnErrorAjaxSubmit when response.result is false', () => {
    const response = { result: false, error: 'Some error' };
    handleAjaxSubmitResponse(response);
    expect(handleOnErrorAjaxSubmit).toHaveBeenCalledWith(response);
  });

  test('should not redirect when response.result is false', () => {
    const response = { result: false };
    handleAjaxSubmitResponse(response);
    expect(mockWindow.location).toBe('');
  });

  test('should handle response with missing result property', () => {
    const response = {};
    handleAjaxSubmitResponse(response);
    expect(handleOnErrorAjaxSubmit).toHaveBeenCalledWith(response);
    expect(mockWindow.location).toBe('');
  });

  test('should handle null response', () => {
    const response = null;
    handleAjaxSubmitResponse(response);
    expect(handleOnErrorAjaxSubmit).toHaveBeenCalledWith(response);
    expect(mockWindow.location).toBe('');
  });

  test('should handle undefined response', () => {
    const response = undefined;
    handleAjaxSubmitResponse(response);
    expect(handleOnErrorAjaxSubmit).toHaveBeenCalledWith(response);
    expect(mockWindow.location).toBe('');
  });
});
