// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=e_c3da1d96dc
ROOST_METHOD_SIG_HASH=e_dad069886e


*/

// ********RoostGPT********
const { e } = require('../../../src/public/javascripts/library/angular.min.js');

describe('e function', () => {
  test('should return input if not an array or object', () => {
    expect(e(42)).toBe(42);
    expect(e(null)).toBe(null);
    expect(e(undefined)).toBe(undefined);
  });

  test('should split string input into array', () => {
    expect(e('hello world')).toEqual(['hello', 'world']);
    expect(e('a b c')).toEqual(['a', 'b', 'c']);
  });

  test('should handle empty string input', () => {
    expect(e('')).toEqual(['']);
  });

  test('should handle object input', () => {
    const input = { a: 'foo bar', b: 'baz qux' };
    expect(e(input)).toEqual(['foo', 'bar', 'baz', 'qux']);
  });

  test('should handle object with empty string values', () => {
    const input = { a: '', b: 'test' };
    expect(e(input)).toEqual(['', 'test']);
  });

  test('should handle object with non-string values', () => {
    const input = { a: 'foo', b: 42, c: 'bar' };
    expect(e(input)).toEqual(['foo', 'bar']);
  });

  test('should handle array input', () => {
    expect(e(['foo bar', 'baz'])).toEqual(['foo bar', 'baz']);
  });

  test('should handle mixed input types', () => {
    const input = { a: 'foo bar', b: ['baz', 'qux'] };
    expect(e(input)).toEqual(['foo', 'bar', 'baz', 'qux']);
  });

  test('should handle nested objects', () => {
    const input = { a: 'foo', b: { c: 'bar baz' } };
    expect(e(input)).toEqual(['foo', 'bar', 'baz']);
  });

  test('should handle empty object input', () => {
    expect(e({})).toEqual([]);
  });

  test('should handle object with all empty string values', () => {
    const input = { a: '', b: '', c: '' };
    expect(e(input)).toEqual(['', '', '']);
  });
});
