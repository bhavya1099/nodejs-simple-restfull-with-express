// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=submitDelete_af505e942b
ROOST_METHOD_SIG_HASH=submitDelete_5927d1fb6c


*/

// ********RoostGPT********
const $ = require('jquery');
const { submitDelete, ROOT_URL, handleAjaxSubmitResponse } = require('../../../src/public/javascripts/custom');

jest.mock('jquery');

describe('submitDelete function', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('should make an AJAX DELETE request with correct parameters when idProduct is provided', () => {
    const mockIdProduct = '123';
    const mockResponse = { success: true };

    $.ajax.mockImplementation((options) => {
      options.success(mockResponse);
    });

    submitDelete(mockIdProduct);

    expect($.ajax).toHaveBeenCalledWith({
      type: 'DELETE',
      url: `${ROOT_URL}/api/products/${mockIdProduct}`,
      success: expect.any(Function),
    });
  });

  test('should call handleAjaxSubmitResponse with the response from the AJAX request', () => {
    const mockIdProduct = '456';
    const mockResponse = { success: true };

    $.ajax.mockImplementation((options) => {
      options.success(mockResponse);
    });

    global.handleAjaxSubmitResponse = jest.fn();

    submitDelete(mockIdProduct);

    expect(global.handleAjaxSubmitResponse).toHaveBeenCalledWith(mockResponse);
  });

  test('should not make an AJAX request when idProduct is not provided', () => {
    submitDelete();

    expect($.ajax).not.toHaveBeenCalled();
  });

  test('should not make an AJAX request when idProduct is null', () => {
    submitDelete(null);

    expect($.ajax).not.toHaveBeenCalled();
  });

  test('should not make an AJAX request when idProduct is undefined', () => {
    submitDelete(undefined);

    expect($.ajax).not.toHaveBeenCalled();
  });

  test('should not make an AJAX request when idProduct is an empty string', () => {
    submitDelete('');

    expect($.ajax).not.toHaveBeenCalled();
  });
});
