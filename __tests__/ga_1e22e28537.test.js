// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=ga_294e272338
ROOST_METHOD_SIG_HASH=ga_1e22e28537


*/

// ********RoostGPT********
const { ga } = require('../../../src/public/javascripts/library/angular.min.js');

describe('ga function', () => {
  let mockX, mockI;

  beforeEach(() => {
    mockX = jest.fn();
    mockI = jest.fn(str => str.toLowerCase());
    global.x = mockX;
    global.I = mockI;
  });

  test('should handle empty input', () => {
    const emptyNode = { nodeType: 3, textContent: '' };
    mockX.mockReturnValue({ 
      clone: () => ({ empty: jest.fn() }),
      [0]: emptyNode
    });
    
    const result = ga('');
    expect(result).toBe('');
  });

  test('should handle text node input', () => {
    const textNode = { nodeType: 3, textContent: 'Hello World' };
    mockX.mockReturnValue({ 
      clone: () => ({ empty: jest.fn() }),
      [0]: textNode
    });
    
    const result = ga('Hello World');
    expect(result).toBe('hello world');
  });

  test('should handle element node input', () => {
    const elementNode = { nodeType: 1, outerHTML: '<div>Test</div>' };
    mockX.mockReturnValue({ 
      clone: () => ({ 
        empty: jest.fn(),
        [0]: elementNode
      }),
    });
    mockX.mockReturnValueOnce({
      append: jest.fn().mockReturnValue({ html: () => '<div>Test</div>' })
    });
    
    const result = ga('<div>Test</div>');
    expect(result).toBe('<div>');
  });

  test('should handle error during empty() call', () => {
    mockX.mockReturnValue({ 
      clone: () => ({ 
        empty: jest.fn().mockImplementation(() => { throw new Error('Empty error'); }),
      }),
    });
    mockX.mockReturnValueOnce({
      append: jest.fn().mockReturnValue({ html: () => '<span>Error</span>' })
    });
    
    const result = ga('<span>Error</span>');
    expect(result).toBe('<span>');
  });

  test('should handle error during match() call', () => {
    const elementNode = { nodeType: 1, outerHTML: '<invalid>' };
    mockX.mockReturnValue({ 
      clone: () => ({ 
        empty: jest.fn(),
        [0]: elementNode
      }),
    });
    mockX.mockReturnValueOnce({
      append: jest.fn().mockReturnValue({ html: () => '<invalid>' })
    });
    
    const result = ga('<invalid>');
    expect(result).toBe('invalid');
  });
});
