// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Uc_4350e97981
ROOST_METHOD_SIG_HASH=Uc_a56106681e


*/

// ********RoostGPT********
const { Uc } = require('../../../src/public/javascripts/library/angular.min.js');

describe('Uc function', () => {
  test('should return true for object with nodeName property', () => {
    const obj = { nodeName: 'div' };
    expect(Uc(obj)).toBe(true);
  });

  test('should return true for object with prop, attr, and find methods', () => {
    const obj = {
      prop: jest.fn(),
      attr: jest.fn(),
      find: jest.fn()
    };
    expect(Uc(obj)).toBe(true);
  });

  test('should return false for null input', () => {
    expect(Uc(null)).toBe(false);
  });

  test('should return false for undefined input', () => {
    expect(Uc(undefined)).toBe(false);
  });

  test('should return false for empty object', () => {
    expect(Uc({})).toBe(false);
  });

  test('should return false for object with only prop method', () => {
    const obj = { prop: jest.fn() };
    expect(Uc(obj)).toBe(false);
  });

  test('should return false for object with only attr method', () => {
    const obj = { attr: jest.fn() };
    expect(Uc(obj)).toBe(false);
  });

  test('should return false for object with only find method', () => {
    const obj = { find: jest.fn() };
    expect(Uc(obj)).toBe(false);
  });

  test('should return false for object with prop and attr but no find method', () => {
    const obj = { prop: jest.fn(), attr: jest.fn() };
    expect(Uc(obj)).toBe(false);
  });

  test('should return false for number input', () => {
    expect(Uc(42)).toBe(false);
  });

  test('should return false for string input', () => {
    expect(Uc('test')).toBe(false);
  });

  test('should return false for boolean input', () => {
    expect(Uc(true)).toBe(false);
    expect(Uc(false)).toBe(false);
  });

  test('should return false for array input', () => {
    expect(Uc([])).toBe(false);
  });

  test('should return true for object with nodeName and other properties', () => {
    const obj = { nodeName: 'div', id: 'test', className: 'example' };
    expect(Uc(obj)).toBe(true);
  });

  test('should return true for object with prop, attr, find and other methods', () => {
    const obj = {
      prop: jest.fn(),
      attr: jest.fn(),
      find: jest.fn(),
      addClass: jest.fn(),
      removeClass: jest.fn()
    };
    expect(Uc(obj)).toBe(true);
  });
});
