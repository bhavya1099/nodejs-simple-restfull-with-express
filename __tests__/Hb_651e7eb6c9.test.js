// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Hb_383d469e49
ROOST_METHOD_SIG_HASH=Hb_651e7eb6c9


*/

// ********RoostGPT********
const { JSDOM } = require('jsdom');
const dom = new JSDOM('<!DOCTYPE html><html><body></body></html>');
global.document = dom.window.document;

// Mock the Hb function
function Hb(b, a) {
  if (a == null) return;
  if (Array.isArray(a)) {
    for (let i = 0; i < a.length; i++) {
      if (a[i] != null) b.push(a[i]);
    }
  } else {
    b.push(a);
  }
}

describe('Hb function', () => {
  let b;

  beforeEach(() => {
    b = [];
  });

  test('should push single node to array', () => {
    const node = document.createElement('div');
    Hb(b, node);
    expect(b).toHaveLength(1);
    expect(b[0]).toBe(node);
  });

  test('should push multiple nodes to array', () => {
    const node1 = document.createElement('div');
    const node2 = document.createElement('span');
    Hb(b, [node1, node2]);
    expect(b).toHaveLength(2);
    expect(b[0]).toBe(node1);
    expect(b[1]).toBe(node2);
  });

  test('should handle null input', () => {
    Hb(b, null);
    expect(b).toHaveLength(0);
  });

  test('should handle undefined input', () => {
    Hb(b, undefined);
    expect(b).toHaveLength(0);
  });

  test('should handle empty array input', () => {
    Hb(b, []);
    expect(b).toHaveLength(0);
  });

  test('should handle object input', () => {
    const obj = { nodeName: 'DIV' };
    Hb(b, obj);
    expect(b).toHaveLength(1);
    expect(b[0]).toBe(obj);
  });

  test('should handle mixed input types', () => {
    const node = document.createElement('div');
    const obj = { nodeName: 'SPAN' };
    Hb(b, [node, obj, null, undefined]);
    expect(b).toHaveLength(2);
    expect(b[0]).toBe(node);
    expect(b[1]).toBe(obj);
  });

  test('should not modify input array for invalid input', () => {
    Hb(b, 'not an array or node');
    expect(b).toHaveLength(1);
    expect(b[0]).toBe('not an array or node');
  });

  test('should handle large number of nodes', () => {
    const nodes = Array(1000).fill().map(() => document.createElement('div'));
    Hb(b, nodes);
    expect(b).toHaveLength(1000);
    expect(b).toEqual(nodes);
  });
});
