// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=showFormErrorMessage_148a1fd638
ROOST_METHOD_SIG_HASH=showFormErrorMessage_b2ca954102


*/

// ********RoostGPT********
const $ = require('jquery');
const { showFormErrorMessage } = require('../../src/public/javascripts/custom');

describe('showFormErrorMessage', () => {
  beforeEach(() => {
    document.body.innerHTML = '<div id="form-error-message"></div>';
  });

  test('should display error message with correct HTML structure', () => {
    const errorMessage = 'Invalid input';
    showFormErrorMessage(errorMessage);

    const errorDiv = $('#form-error-message');
    expect(errorDiv.html()).toContain('<div class="alert alert-danger">');
    expect(errorDiv.html()).toContain('<a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>');
    expect(errorDiv.html()).toContain('<strong>Error!</strong>');
    expect(errorDiv.html()).toContain(errorMessage);
  });

  test('should handle empty error message', () => {
    showFormErrorMessage('');

    const errorDiv = $('#form-error-message');
    expect(errorDiv.html()).toContain('<div class="alert alert-danger">');
    expect(errorDiv.html()).toContain('<strong>Error!</strong> &nbsp; ');
  });

  test('should handle special characters in error message', () => {
    const specialMessage = '<script>alert("XSS")</script>';
    showFormErrorMessage(specialMessage);

    const errorDiv = $('#form-error-message');
    expect(errorDiv.html()).toContain(specialMessage);
    expect(errorDiv.html()).not.toContain('<script>');
  });

  test('should update existing error message', () => {
    showFormErrorMessage('First error');
    showFormErrorMessage('Second error');

    const errorDiv = $('#form-error-message');
    expect(errorDiv.html()).not.toContain('First error');
    expect(errorDiv.html()).toContain('Second error');
  });

  test('should handle non-string error messages', () => {
    showFormErrorMessage(123);

    const errorDiv = $('#form-error-message');
    expect(errorDiv.html()).toContain('123');
  });

  test('should not throw error when form-error-message element is missing', () => {
    document.body.innerHTML = '';
    expect(() => showFormErrorMessage('Test error')).not.toThrow();
  });
});
