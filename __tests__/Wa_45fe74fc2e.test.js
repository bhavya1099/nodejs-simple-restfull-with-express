// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Wa_fbdf5112c6
ROOST_METHOD_SIG_HASH=Wa_45fe74fc2e


*/

// ********RoostGPT********
const angular = require('../src/public/javascripts/library/angular.min.js');

describe('Wa function', () => {
  test('replaces dashes and underscores with uppercase letters', () => {
    const input = 'hello-world_example';
    const expected = 'helloWorldExample';
    expect(angular.Wa(input)).toBe(expected);
  });

  test('handles multiple consecutive dashes and underscores', () => {
    const input = 'multiple---dashes___underscores';
    const expected = 'multipleDashesUnderscores';
    expect(angular.Wa(input)).toBe(expected);
  });

  test('handles dashes and underscores at the beginning and end', () => {
    const input = '-_start_and_end-';
    const expected = 'StartAndEnd';
    expect(angular.Wa(input)).toBe(expected);
  });

  test('replaces "moz" prefix with "Moz"', () => {
    const input = 'mozTransform';
    const expected = 'MozTransform';
    expect(angular.Wa(input)).toBe(expected);
  });

  test('handles combination of dashes, underscores, and moz prefix', () => {
    const input = 'moz-border-radius_example';
    const expected = 'MozBorderRadiusExample';
    expect(angular.Wa(input)).toBe(expected);
  });

  test('returns unchanged string if no replacements needed', () => {
    const input = 'normalString';
    expect(angular.Wa(input)).toBe(input);
  });

  test('handles empty string', () => {
    expect(angular.Wa('')).toBe('');
  });

  test('handles string with only dashes and underscores', () => {
    const input = '---___';
    expect(angular.Wa(input)).toBe('');
  });

  test('handles non-string input', () => {
    expect(() => angular.Wa(123)).toThrow();
    expect(() => angular.Wa(null)).toThrow();
    expect(() => angular.Wa(undefined)).toThrow();
    expect(() => angular.Wa({})).toThrow();
  });
});
