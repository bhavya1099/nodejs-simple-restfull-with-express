// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Jb_f55e9bce3c
ROOST_METHOD_SIG_HASH=Jb_680a847b9e


*/

// ********RoostGPT********
const angular = require('../../../src/public/javascripts/library/angular.min.js');

describe('Jb function', () => {
  let mockElement;

  beforeEach(() => {
    mockElement = {
      getAttribute: jest.fn()
    };
  });

  test('should return true when class attribute contains the specified class', () => {
    mockElement.getAttribute.mockReturnValue('class1 class2 class3');
    expect(angular.Jb(mockElement, 'class2')).toBe(true);
  });

  test('should return false when class attribute does not contain the specified class', () => {
    mockElement.getAttribute.mockReturnValue('class1 class3');
    expect(angular.Jb(mockElement, 'class2')).toBe(false);
  });

  test('should return false when class attribute is empty', () => {
    mockElement.getAttribute.mockReturnValue('');
    expect(angular.Jb(mockElement, 'class1')).toBe(false);
  });

  test('should return false when class attribute is null', () => {
    mockElement.getAttribute.mockReturnValue(null);
    expect(angular.Jb(mockElement, 'class1')).toBe(false);
  });

  test('should handle class names with newlines and tabs', () => {
    mockElement.getAttribute.mockReturnValue('class1\nclass2\tclass3');
    expect(angular.Jb(mockElement, 'class2')).toBe(true);
  });

  test('should return false when element does not have getAttribute method', () => {
    const elementWithoutGetAttribute = {};
    expect(angular.Jb(elementWithoutGetAttribute, 'class1')).toBe(false);
  });

  test('should handle multiple spaces between class names', () => {
    mockElement.getAttribute.mockReturnValue('class1   class2     class3');
    expect(angular.Jb(mockElement, 'class2')).toBe(true);
  });

  test('should return false for partial class name match', () => {
    mockElement.getAttribute.mockReturnValue('class1 class2 class3');
    expect(angular.Jb(mockElement, 'clas')).toBe(false);
  });

  test('should be case sensitive', () => {
    mockElement.getAttribute.mockReturnValue('Class1 Class2 Class3');
    expect(angular.Jb(mockElement, 'class2')).toBe(false);
  });

  test('should handle empty string as class name', () => {
    mockElement.getAttribute.mockReturnValue('class1 class2 class3');
    expect(angular.Jb(mockElement, '')).toBe(false);
  });
});
