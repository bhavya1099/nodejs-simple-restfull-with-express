// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=g_747aaad88e
ROOST_METHOD_SIG_HASH=g_2f9681309f


*/

// ********RoostGPT********
const { g } = require('../src/public/javascripts/library/angular.min.js');

describe('g function', () => {
  test('should return 0 for equal strings', () => {
    expect(g('hello', 'hello')).toBe(0);
  });

  test('should return 0 for equal strings with different cases', () => {
    expect(g('Hello', 'hELLO')).toBe(0);
  });

  test('should return -1 when first string is alphabetically before second string', () => {
    expect(g('apple', 'banana')).toBe(-1);
  });

  test('should return 1 when first string is alphabetically after second string', () => {
    expect(g('zebra', 'aardvark')).toBe(1);
  });

  test('should return -1 when comparing string to number', () => {
    expect(g('abc', 123)).toBe(-1);
  });

  test('should return 1 when comparing number to string', () => {
    expect(g(123, 'abc')).toBe(1);
  });

  test('should return 0 for equal numbers', () => {
    expect(g(42, 42)).toBe(0);
  });

  test('should return -1 when first number is less than second number', () => {
    expect(g(10, 20)).toBe(-1);
  });

  test('should return 1 when first number is greater than second number', () => {
    expect(g(30, 20)).toBe(1);
  });

  test('should return 0 for equal booleans', () => {
    expect(g(true, true)).toBe(0);
    expect(g(false, false)).toBe(0);
  });

  test('should return -1 when comparing false to true', () => {
    expect(g(false, true)).toBe(-1);
  });

  test('should return 1 when comparing true to false', () => {
    expect(g(true, false)).toBe(1);
  });

  test('should return 0 for equal null values', () => {
    expect(g(null, null)).toBe(0);
  });

  test('should return 0 for equal undefined values', () => {
    expect(g(undefined, undefined)).toBe(0);
  });

  test('should return -1 when comparing null to undefined', () => {
    expect(g(null, undefined)).toBe(-1);
  });

  test('should return 1 when comparing undefined to null', () => {
    expect(g(undefined, null)).toBe(1);
  });

  test('should return -1 when comparing empty string to non-empty string', () => {
    expect(g('', 'a')).toBe(-1);
  });

  test('should return 1 when comparing non-empty string to empty string', () => {
    expect(g('a', '')).toBe(1);
  });

  test('should return 0 for equal empty strings', () => {
    expect(g('', '')).toBe(0);
  });

  test('should return -1 when comparing empty array to non-empty array', () => {
    expect(g([], [1])).toBe(-1);
  });

  test('should return 1 when comparing non-empty array to empty array', () => {
    expect(g([1], [])).toBe(1);
  });

  test('should return 0 for equal empty arrays', () => {
    expect(g([], [])).toBe(0);
  });

  test('should return -1 when comparing empty object to non-empty object', () => {
    expect(g({}, {a: 1})).toBe(-1);
  });

  test('should return 1 when comparing non-empty object to empty object', () => {
    expect(g({a: 1}, {})).toBe(1);
  });

  test('should return 0 for equal empty objects', () => {
    expect(g({}, {})).toBe(0);
  });
});
