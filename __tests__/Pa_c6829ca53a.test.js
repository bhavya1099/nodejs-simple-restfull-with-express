// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Pa_5daadf536b
ROOST_METHOD_SIG_HASH=Pa_c6829ca53a


*/

// ********RoostGPT********
const { Pa } = require('../src/public/javascripts/library/angular.min.js');

describe('Pa function', () => {
  test('should return correct index when element is found in array with indexOf', () => {
    const array = [1, 2, 3, 4, 5];
    expect(Pa(array, 3)).toBe(2);
  });

  test('should return -1 when element is not found in array with indexOf', () => {
    const array = [1, 2, 3, 4, 5];
    expect(Pa(array, 6)).toBe(-1);
  });

  test('should return correct index when element is found in array without indexOf', () => {
    const array = { length: 5, 0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e' };
    expect(Pa(array, 'c')).toBe(2);
  });

  test('should return -1 when element is not found in array without indexOf', () => {
    const array = { length: 5, 0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e' };
    expect(Pa(array, 'f')).toBe(-1);
  });

  test('should work with empty array', () => {
    expect(Pa([], 'anything')).toBe(-1);
  });

  test('should work with array-like object', () => {
    const arrayLike = { length: 3, 0: 'zero', 1: 'one', 2: 'two' };
    expect(Pa(arrayLike, 'one')).toBe(1);
  });

  test('should return -1 for undefined element in array', () => {
    const array = [1, undefined, 3];
    expect(Pa(array, undefined)).toBe(1);
  });

  test('should return -1 for null element in array', () => {
    const array = [1, null, 3];
    expect(Pa(array, null)).toBe(1);
  });

  test('should work with array of objects', () => {
    const array = [{ id: 1 }, { id: 2 }, { id: 3 }];
    const searchObj = { id: 2 };
    expect(Pa(array, searchObj)).toBe(1);
  });

  test('should return first occurrence index when multiple elements match', () => {
    const array = [1, 2, 3, 2, 4, 2];
    expect(Pa(array, 2)).toBe(1);
  });
});
