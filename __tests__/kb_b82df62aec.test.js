// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=kb_4c63220af9
ROOST_METHOD_SIG_HASH=kb_b82df62aec


*/

// ********RoostGPT********
const angular = require('../src/public/javascripts/library/angular.min.js');

// Mock global objects
global.window = {};
global.document = {
  querySelector: jest.fn(),
  createElement: jest.fn(),
};

describe('kb function', () => {
  let mockElement, mockData;

  beforeEach(() => {
    mockElement = {
      nodeType: 9,
      find: jest.fn(),
      data: jest.fn(),
      parentNode: null,
    };
    mockData = {
      key1: 'value1',
      key2: 'value2',
    };
    global.x = jest.fn().mockReturnValue([mockElement]);
    global.L = jest.fn().mockReturnValue(true);
  });

  test('should return data when found', () => {
    mockElement.data.mockReturnValue('foundData');
    const result = angular.kb(mockElement, 'key1');
    expect(result).toBe('foundData');
  });

  test('should traverse up the DOM tree when data not found', () => {
    mockElement.data.mockReturnValue(undefined);
    mockElement.parentNode = { nodeType: 1 };
    global.x.mockReturnValueOnce([mockElement]).mockReturnValueOnce([]);
    const result = angular.kb(mockElement, 'key1');
    expect(result).toBeUndefined();
  });

  test('should handle multiple keys', () => {
    mockElement.data
      .mockReturnValueOnce(undefined)
      .mockReturnValueOnce('foundData');
    const result = angular.kb(mockElement, ['key1', 'key2']);
    expect(result).toBe('foundData');
  });

  test('should return undefined when no data found', () => {
    mockElement.data.mockReturnValue(undefined);
    global.x.mockReturnValue([]);
    const result = angular.kb(mockElement, 'key1');
    expect(result).toBeUndefined();
  });

  test('should handle HTML element', () => {
    mockElement.nodeType = 9;
    mockElement.find.mockReturnValue([{ data: jest.fn().mockReturnValue('htmlData') }]);
    const result = angular.kb(mockElement, 'key1');
    expect(result).toBe('htmlData');
  });

  test('should handle host property for nodeType 11', () => {
    mockElement.nodeType = 11;
    mockElement.host = { data: jest.fn().mockReturnValue('hostData') };
    global.x.mockReturnValue([mockElement.host]);
    const result = angular.kb(mockElement, 'key1');
    expect(result).toBe('hostData');
  });

  test('should handle empty array input', () => {
    global.x.mockReturnValue([]);
    const result = angular.kb([], 'key1');
    expect(result).toBeUndefined();
  });

  test('should handle null input', () => {
    global.x.mockReturnValue([]);
    const result = angular.kb(null, 'key1');
    expect(result).toBeUndefined();
  });
});
