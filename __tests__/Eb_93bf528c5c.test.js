// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Eb_1d9b0837bf
ROOST_METHOD_SIG_HASH=Eb_93bf528c5c


*/

// ********RoostGPT********
const { Eb } = require('../src/public/javascripts/library/angular.min.js');

describe('Eb function', () => {
  let mockCa, mockFilter, mockShift, mockX, mockTriggerHandler, mockChildren, mockPush, mockApply;

  beforeEach(() => {
    mockCa = {
      fn: {
        testMethod: jest.fn()
      }
    };
    mockFilter = jest.fn();
    mockShift = jest.fn();
    mockX = jest.fn();
    mockTriggerHandler = jest.fn();
    mockChildren = jest.fn();
    mockPush = jest.fn();
    mockApply = jest.fn();

    global.Ca = mockCa;
    global.x = mockX;
  });

  test('should create a new function and assign it to Ca.fn[b]', () => {
    const b = 'testMethod';
    const a = true;
    const c = true;
    const d = null;

    Eb(b, a, c, d);

    expect(typeof mockCa.fn[b]).toBe('function');
    expect(mockCa.fn[b]).not.toBe(mockCa.fn[b].$original);
  });

  test('should call the original function when d is falsy and b is null', () => {
    const b = 'testMethod';
    const a = true;
    const c = true;
    const d = null;

    Eb(b, a, c, d);
    mockCa.fn[b](null);

    expect(mockCa.fn[b].$original).toHaveBeenCalled();
  });

  test('should process elements when d is truthy or b is not null', () => {
    const b = 'testMethod';
    const a = true;
    const c = true;
    const d = true;

    mockFilter.mockReturnValue([{ length: 1 }]);
    mockX.mockReturnValue({
      triggerHandler: mockTriggerHandler,
      children: mockChildren
    });
    mockChildren.mockReturnValue([]);

    Eb(b, a, c, d);
    mockCa.fn[b]('test');

    expect(mockFilter).toHaveBeenCalledWith('test');
    expect(mockX).toHaveBeenCalled();
    expect(mockTriggerHandler).toHaveBeenCalledWith('$destroy');
    expect(mockChildren).toHaveBeenCalled();
  });

  test('should handle nested children', () => {
    const b = 'testMethod';
    const a = true;
    const c = true;
    const d = true;

    mockFilter.mockReturnValue([{ length: 1 }]);
    mockX.mockReturnValue({
      triggerHandler: mockTriggerHandler,
      children: mockChildren
    });
    mockChildren.mockReturnValue([{}, {}]);

    Eb(b, a, c, d);
    mockCa.fn[b]('test');

    expect(mockPush).toHaveBeenCalledTimes(2);
  });

  test('should apply original function arguments', () => {
    const b = 'testMethod';
    const a = true;
    const c = true;
    const d = true;

    Eb(b, a, c, d);
    mockCa.fn[b]('arg1', 'arg2');

    expect(mockApply).toHaveBeenCalledWith(expect.anything(), ['arg1', 'arg2']);
  });
});
