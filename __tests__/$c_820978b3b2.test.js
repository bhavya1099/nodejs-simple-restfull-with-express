// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=$c_2914781c1e
ROOST_METHOD_SIG_HASH=$c_820978b3b2


*/

// ********RoostGPT********
const angular = require('src/public/javascripts/library/angular.min.js');

describe('$c function', () => {

  let $c;

  beforeEach(() => {
    $c = angular.$c;
  });

  test('should extend object with bootstrap property', () => {
    const obj = {};
    $c(obj);
    expect(obj.bootstrap).toBeDefined();
  });

  test('should extend object with copy property', () => {
    const obj = {};
    $c(obj);
    expect(obj.copy).toBeDefined();
  });

  test('should extend object with extend property', () => {
    const obj = {};
    $c(obj);
    expect(obj.extend).toBeDefined();
  });

  test('should extend object with equals property', () => {
    const obj = {};
    $c(obj);
    expect(obj.equals).toBeDefined();
  });

  test('should extend object with element property', () => {
    const obj = {};
    $c(obj);
    expect(obj.element).toBeDefined();
  });

  test('should extend object with forEach property', () => {
    const obj = {};
    $c(obj);
    expect(obj.forEach).toBeDefined();
  });

  test('should extend object with injector property', () => {
    const obj = {};
    $c(obj);
    expect(obj.injector).toBeDefined();
  });

  test('should extend object with noop property', () => {
    const obj = {};
    $c(obj);
    expect(obj.noop).toBeDefined();
  });

  test('should extend object with bind property', () => {
    const obj = {};
    $c(obj);
    expect(obj.bind).toBeDefined();
  });

  test('should extend object with toJson property', () => {
    const obj = {};
    $c(obj);
    expect(obj.toJson).toBeDefined();
  });

  test('should extend object with fromJson property', () => {
    const obj = {};
    $c(obj);
    expect(obj.fromJson).toBeDefined();
  });

  test('should extend object with identity property', () => {
    const obj = {};
    $c(obj);
    expect(obj.identity).toBeDefined();
  });

  test('should extend object with isUndefined property', () => {
    const obj = {};
    $c(obj);
    expect(obj.isUndefined).toBeDefined();
  });

  test('should extend object with isDefined property', () => {
    const obj = {};
    $c(obj);
    expect(obj.isDefined).toBeDefined();
  });

  test('should extend object with isString property', () => {
    const obj = {};
    $c(obj);
    expect(obj.isString).toBeDefined();
  });

  test('should extend object with isFunction property', () => {
    const obj = {};
    $c(obj);
    expect(obj.isFunction).toBeDefined();
  });

  test('should extend object with isObject property', () => {
    const obj = {};
    $c(obj);
    expect(obj.isObject).toBeDefined();
  });

  test('should extend object with isNumber property', () => {
    const obj = {};
    $c(obj);
    expect(obj.isNumber).toBeDefined();
  });

  test('should extend object with isElement property', () => {
    const obj = {};
    $c(obj);
    expect(obj.isElement).toBeDefined();
  });

  test('should extend object with isArray property', () => {
    const obj = {};
    $c(obj);
    expect(obj.isArray).toBeDefined();
  });

  test('should extend object with version property', () => {
    const obj = {};
    $c(obj);
    expect(obj.version).toBeDefined();
  });

  test('should extend object with isDate property', () => {
    const obj = {};
    $c(obj);
    expect(obj.isDate).toBeDefined();
  });

  test('should extend object with lowercase property', () => {
    const obj = {};
    $c(obj);
    expect(obj.lowercase).toBeDefined();
  });

  test('should extend object with uppercase property', () => {
    const obj = {};
    $c(obj);
    expect(obj.uppercase).toBeDefined();
  });

  test('should extend object with callbacks property', () => {
    const obj = {};
    $c(obj);
    expect(obj.callbacks).toBeDefined();
    expect(obj.callbacks.counter).toBe(0);
  });

  test('should extend object with $minErr property', () => {
    const obj = {};
    $c(obj);
    expect(obj.$minErr).toBeDefined();
  });

  test('should extend object with $csp property', () => {
    const obj = {};
    $c(obj);
    expect(obj.$csp).toBeDefined();
  });

});
