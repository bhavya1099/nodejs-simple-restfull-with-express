// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=jb_2fa15b66d9
ROOST_METHOD_SIG_HASH=jb_dd95257772


*/

// ********RoostGPT********
const { jb } = require('../../../src/public/javascripts/library/angular.min.js');

describe('jb function', () => {
  let element;

  beforeEach(() => {
    element = document.createElement('div');
  });

  test('adds a single class to an element without existing classes', () => {
    jb(element, 'new-class');
    expect(element.getAttribute('class')).toBe('new-class');
  });

  test('adds multiple classes to an element without existing classes', () => {
    jb(element, 'class1 class2');
    expect(element.getAttribute('class')).toBe('class1 class2');
  });

  test('adds classes to an element with existing classes', () => {
    element.setAttribute('class', 'existing-class');
    jb(element, 'new-class1 new-class2');
    expect(element.getAttribute('class')).toBe('existing-class new-class1 new-class2');
  });

  test('does not add duplicate classes', () => {
    element.setAttribute('class', 'existing-class');
    jb(element, 'existing-class new-class');
    expect(element.getAttribute('class')).toBe('existing-class new-class');
  });

  test('handles whitespace and newlines in existing classes', () => {
    element.setAttribute('class', 'class1\n\tclass2');
    jb(element, 'class3');
    expect(element.getAttribute('class')).toBe('class1 class2 class3');
  });

  test('trims whitespace from added classes', () => {
    jb(element, '  class1  class2  ');
    expect(element.getAttribute('class')).toBe('class1 class2');
  });

  test('does nothing when no classes are provided', () => {
    jb(element, '');
    expect(element.getAttribute('class')).toBe(null);
  });

  test('does nothing when element does not support setAttribute', () => {
    const obj = {};
    jb(obj, 'class1');
    expect(obj.hasOwnProperty('class')).toBe(false);
  });

  test('handles null or undefined for the second argument', () => {
    jb(element, null);
    expect(element.getAttribute('class')).toBe(null);

    jb(element, undefined);
    expect(element.getAttribute('class')).toBe(null);
  });

  test('handles non-string values for the second argument', () => {
    jb(element, 123);
    expect(element.getAttribute('class')).toBe('123');

    jb(element, { toString: () => 'object-class' });
    expect(element.getAttribute('class')).toBe('123 object-class');
  });
});
