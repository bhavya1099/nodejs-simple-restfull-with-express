// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=ya_141ee35a9e
ROOST_METHOD_SIG_HASH=ya_c45ef49191


*/

// ********RoostGPT********
const { ya } = require('../src/public/javascripts/library/angular.min.js');

describe('ya function', () => {
  test('should return true for identical primitives', () => {
    expect(ya(1, 1)).toBe(true);
    expect(ya('string', 'string')).toBe(true);
    expect(ya(true, true)).toBe(true);
  });

  test('should return false for different primitives', () => {
    expect(ya(1, 2)).toBe(false);
    expect(ya('string', 'different')).toBe(false);
    expect(ya(true, false)).toBe(false);
  });

  test('should return true for NaN values', () => {
    expect(ya(NaN, NaN)).toBe(true);
  });

  test('should return false when one value is null and the other is not', () => {
    expect(ya(null, 'value')).toBe(false);
    expect(ya('value', null)).toBe(false);
  });

  test('should return true for identical arrays', () => {
    expect(ya([1, 2, 3], [1, 2, 3])).toBe(true);
  });

  test('should return false for different arrays', () => {
    expect(ya([1, 2, 3], [1, 2, 4])).toBe(false);
  });

  test('should return true for identical date objects', () => {
    const date1 = new Date('2023-05-01');
    const date2 = new Date('2023-05-01');
    expect(ya(date1, date2)).toBe(true);
  });

  test('should return false for different date objects', () => {
    const date1 = new Date('2023-05-01');
    const date2 = new Date('2023-05-02');
    expect(ya(date1, date2)).toBe(false);
  });

  test('should return true for identical objects', () => {
    const obj1 = { a: 1, b: 2 };
    const obj2 = { a: 1, b: 2 };
    expect(ya(obj1, obj2)).toBe(true);
  });

  test('should return false for different objects', () => {
    const obj1 = { a: 1, b: 2 };
    const obj2 = { a: 1, b: 3 };
    expect(ya(obj1, obj2)).toBe(false);
  });

  test('should ignore properties starting with "$"', () => {
    const obj1 = { a: 1, $b: 2 };
    const obj2 = { a: 1, $b: 3 };
    expect(ya(obj1, obj2)).toBe(true);
  });

  test('should return false for objects with different number of properties', () => {
    const obj1 = { a: 1, b: 2 };
    const obj2 = { a: 1, b: 2, c: 3 };
    expect(ya(obj1, obj2)).toBe(false);
  });

  test('should return false when comparing an object to an array', () => {
    expect(ya({ length: 1, 0: 'a' }, ['a'])).toBe(false);
  });

  test('should return false when comparing functions', () => {
    const func1 = () => {};
    const func2 = () => {};
    expect(ya(func1, func2)).toBe(false);
  });
});
