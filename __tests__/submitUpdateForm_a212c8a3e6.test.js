// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=submitUpdateForm_b332a98868
ROOST_METHOD_SIG_HASH=submitUpdateForm_a212c8a3e6


*/

// ********RoostGPT********
const $ = require('jquery');
const { submitUpdateForm } = require('../../../src/public/javascripts/custom');

jest.mock('jquery');

describe('submitUpdateForm', () => {
  const mockIdProduct = '123';
  const mockProduct = {
    title: 'Test Product',
    description: 'Test Description',
    price: '9.99'
  };

  beforeEach(() => {
    jest.clearAllMocks();
    global.ROOT_URL = 'http://example.com';
    global.validateForm = jest.fn();
    global.handleAjaxSubmitResponse = jest.fn();
  });

  test('should submit form when validateForm returns true and idProduct is provided', () => {
    global.validateForm.mockReturnValue(true);
    $.val.mockImplementation((selector) => mockProduct[selector]);
    $.ajax.mockImplementation((options) => {
      options.success('success');
    });

    submitUpdateForm(mockIdProduct);

    expect($.ajax).toHaveBeenCalledWith({
      type: 'PUT',
      url: 'http://example.com/api/products/123',
      data: mockProduct,
      success: expect.any(Function)
    });
    expect(handleAjaxSubmitResponse).toHaveBeenCalledWith('success');
  });

  test('should not submit form when validateForm returns false', () => {
    global.validateForm.mockReturnValue(false);

    const result = submitUpdateForm(mockIdProduct);

    expect($.ajax).not.toHaveBeenCalled();
    expect(result).toBe(false);
  });

  test('should not submit form when idProduct is not provided', () => {
    global.validateForm.mockReturnValue(true);

    const result = submitUpdateForm();

    expect($.ajax).not.toHaveBeenCalled();
    expect(result).toBe(false);
  });

  test('should handle ajax error', () => {
    global.validateForm.mockReturnValue(true);
    $.val.mockImplementation((selector) => mockProduct[selector]);
    $.ajax.mockImplementation((options) => {
      options.error('error');
    });

    submitUpdateForm(mockIdProduct);

    expect($.ajax).toHaveBeenCalled();
    expect(handleAjaxSubmitResponse).not.toHaveBeenCalled();
  });

  test('should use correct selectors for form fields', () => {
    global.validateForm.mockReturnValue(true);
    submitUpdateForm(mockIdProduct);

    expect($.val).toHaveBeenCalledWith('title');
    expect($.val).toHaveBeenCalledWith('description');
    expect($.val).toHaveBeenCalledWith('price');
  });
});
