// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Z_e096f96b78
ROOST_METHOD_SIG_HASH=Z_869a450493


*/

// ********RoostGPT********
const Z = require('../../../src/public/javascripts/library/angular.min.js').Z;

describe('Z function', () => {
  test('should parse a valid integer string', () => {
    expect(Z('123')).toBe(123);
  });

  test('should parse a negative integer string', () => {
    expect(Z('-456')).toBe(-456);
  });

  test('should parse a string with leading zeros', () => {
    expect(Z('00789')).toBe(789);
  });

  test('should return NaN for non-numeric strings', () => {
    expect(Z('abc')).toBeNaN();
  });

  test('should return NaN for empty string', () => {
    expect(Z('')).toBeNaN();
  });

  test('should return NaN for null', () => {
    expect(Z(null)).toBeNaN();
  });

  test('should return NaN for undefined', () => {
    expect(Z(undefined)).toBeNaN();
  });

  test('should parse a string with whitespace', () => {
    expect(Z('  123  ')).toBe(123);
  });

  test('should parse a float string and return only the integer part', () => {
    expect(Z('123.45')).toBe(123);
  });

  test('should parse a string with positive sign', () => {
    expect(Z('+789')).toBe(789);
  });

  test('should return NaN for strings with non-numeric characters', () => {
    expect(Z('123abc')).toBeNaN();
  });

  test('should parse very large integers', () => {
    expect(Z('9007199254740991')).toBe(9007199254740991);
  });

  test('should parse very small integers', () => {
    expect(Z('-9007199254740991')).toBe(-9007199254740991);
  });

  test('should handle scientific notation', () => {
    expect(Z('1e3')).toBe(1000);
  });

  test('should return NaN for Infinity', () => {
    expect(Z('Infinity')).toBeNaN();
  });

  test('should return NaN for -Infinity', () => {
    expect(Z('-Infinity')).toBeNaN();
  });
});
