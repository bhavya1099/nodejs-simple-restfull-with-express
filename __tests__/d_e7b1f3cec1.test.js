// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=d_70f2a1b57e
ROOST_METHOD_SIG_HASH=d_e7b1f3cec1


*/

// ********RoostGPT********
const { d } = require('../../../src/public/javascripts/library/angular.min.js');

describe('d function', () => {
  test('should return an empty array when both input arrays are empty', () => {
    expect(d([], [])).toEqual([]);
  });

  test('should return the first array when the second array is empty', () => {
    expect(d([1, 2, 3], [])).toEqual([1, 2, 3]);
  });

  test('should return an empty array when the first array is empty', () => {
    expect(d([], [1, 2, 3])).toEqual([]);
  });

  test('should remove elements from the first array that are present in the second array', () => {
    expect(d([1, 2, 3, 4, 5], [2, 4])).toEqual([1, 3, 5]);
  });

  test('should handle duplicate elements in the first array', () => {
    expect(d([1, 2, 2, 3, 4, 4, 5], [2, 4])).toEqual([1, 3, 5]);
  });

  test('should handle duplicate elements in the second array', () => {
    expect(d([1, 2, 3, 4, 5], [2, 2, 4, 4])).toEqual([1, 3, 5]);
  });

  test('should return the first array when there are no common elements', () => {
    expect(d([1, 2, 3], [4, 5, 6])).toEqual([1, 2, 3]);
  });

  test('should handle non-primitive types', () => {
    const obj1 = { id: 1 };
    const obj2 = { id: 2 };
    const obj3 = { id: 3 };
    expect(d([obj1, obj2, obj3], [obj2])).toEqual([obj1, obj3]);
  });

  test('should handle mixed data types', () => {
    expect(d([1, 'two', true, null, undefined], ['two', null])).toEqual([1, true, undefined]);
  });

  test('should handle large arrays', () => {
    const largeArray1 = Array.from({ length: 10000 }, (_, i) => i);
    const largeArray2 = Array.from({ length: 5000 }, (_, i) => i * 2);
    const result = d(largeArray1, largeArray2);
    expect(result.length).toBe(5000);
    expect(result[0]).toBe(1);
    expect(result[result.length - 1]).toBe(9999);
  });

  test('should throw an error when first argument is not an array', () => {
    expect(() => d('not an array', [])).toThrow();
  });

  test('should throw an error when second argument is not an array', () => {
    expect(() => d([], 'not an array')).toThrow();
  });
});
