// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=kc_498c577c52
ROOST_METHOD_SIG_HASH=kc_549e634d1d


*/

// ********RoostGPT********
const angular = require('../../../src/public/javascripts/library/angular.min.js');

describe('kc function', () => {
  let mockYa;
  let mockElement;

  beforeEach(() => {
    mockYa = {};
    global.Ya = mockYa;
    mockElement = { ng339: 1 };
  });

  test('should delete data for specific key when "a" is provided', () => {
    const mockData = { testKey: 'testValue' };
    mockYa[1] = { data: mockData };

    angular.kc(mockElement, 'testKey');

    expect(mockYa[1].data.testKey).toBeUndefined();
    expect(mockYa[1]).toBeDefined();
  });

  test('should delete entire entry and remove ng339 when "a" is not provided', () => {
    const mockHandle = jest.fn();
    mockYa[1] = {
      handle: mockHandle,
      events: { $destroy: true },
      data: {}
    };

    angular.kc(mockElement);

    expect(mockHandle).toHaveBeenCalledWith({}, '$destroy');
    expect(mockYa[1]).toBeUndefined();
    expect(mockElement.ng339).toBeUndefined();
  });

  test('should not throw error when ng339 does not exist', () => {
    const elementWithoutNg339 = {};

    expect(() => angular.kc(elementWithoutNg339)).not.toThrow();
  });

  test('should not throw error when Ya entry does not exist', () => {
    mockElement.ng339 = 999; // Non-existent entry

    expect(() => angular.kc(mockElement)).not.toThrow();
  });

  test('should not call handle if it does not exist', () => {
    mockYa[1] = { data: {} }; // No handle function

    expect(() => angular.kc(mockElement)).not.toThrow();
  });

  test('should not call handle for $destroy if events.$destroy is falsy', () => {
    const mockHandle = jest.fn();
    mockYa[1] = {
      handle: mockHandle,
      events: { $destroy: false },
      data: {}
    };

    angular.kc(mockElement);

    expect(mockHandle).not.toHaveBeenCalled();
  });
});
