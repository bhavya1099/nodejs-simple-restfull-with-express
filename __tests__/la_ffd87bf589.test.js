// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=la_d24f2e417d
ROOST_METHOD_SIG_HASH=la_ffd87bf589


*/

// ********RoostGPT********
const { la } = require('../src/public/javascripts/library/angular.min.js');

describe('la function', () => {
  test('should return an array when input is an array', () => {
    const input = [1, 2, 3];
    const result = la(input);
    expect(Array.isArray(result)).toBe(true);
    expect(result).toEqual(input);
  });

  test('should copy array elements to the provided output array', () => {
    const input = [1, 2, 3];
    const output = [];
    const result = la(input, output);
    expect(result).toBe(output);
    expect(result).toEqual(input);
  });

  test('should return an object when input is an object', () => {
    const input = { a: 1, b: 2 };
    const result = la(input);
    expect(typeof result).toBe('object');
    expect(result).toEqual(input);
  });

  test('should copy object properties to the provided output object', () => {
    const input = { a: 1, b: 2 };
    const output = {};
    const result = la(input, output);
    expect(result).toBe(output);
    expect(result).toEqual(input);
  });

  test('should not copy properties starting with "$"', () => {
    const input = { a: 1, $b: 2, $$c: 3 };
    const result = la(input);
    expect(result).toEqual({ a: 1 });
  });

  test('should return the input when it is neither an array nor an object', () => {
    const input = 'test';
    const result = la(input);
    expect(result).toBe(input);
  });

  test('should handle empty array input', () => {
    const input = [];
    const result = la(input);
    expect(result).toEqual([]);
  });

  test('should handle empty object input', () => {
    const input = {};
    const result = la(input);
    expect(result).toEqual({});
  });

  test('should handle null input', () => {
    const input = null;
    const result = la(input);
    expect(result).toBeNull();
  });

  test('should handle undefined input', () => {
    const input = undefined;
    const result = la(input);
    expect(result).toBeUndefined();
  });
});
