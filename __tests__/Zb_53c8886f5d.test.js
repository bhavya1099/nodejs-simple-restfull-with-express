// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=Zb_889d84b974
ROOST_METHOD_SIG_HASH=Zb_53c8886f5d


*/

// ********RoostGPT********
const angular = require('../src/public/javascripts/library/angular.min.js');

describe('Zb function', () => {
  let mockDocument;

  beforeEach(() => {
    mockDocument = {
      securityPolicy: null,
      querySelector: jest.fn()
    };
    global.V = mockDocument;
  });

  test('should return true when securityPolicy is active', () => {
    mockDocument.securityPolicy = { isActive: true };
    expect(angular.Zb()).toBe(true);
  });

  test('should return true when ng-csp attribute is present', () => {
    mockDocument.querySelector.mockReturnValueOnce(true);
    expect(angular.Zb()).toBe(true);
  });

  test('should return true when data-ng-csp attribute is present', () => {
    mockDocument.querySelector.mockReturnValueOnce(false).mockReturnValueOnce(true);
    expect(angular.Zb()).toBe(true);
  });

  test('should return false when no security policy and no csp attributes', () => {
    mockDocument.querySelector.mockReturnValue(false);
    expect(angular.Zb()).toBe(false);
  });

  test('should return false when securityPolicy is not active and no csp attributes', () => {
    mockDocument.securityPolicy = { isActive: false };
    mockDocument.querySelector.mockReturnValue(false);
    expect(angular.Zb()).toBe(false);
  });

  test('should handle case when querySelector is not available', () => {
    delete mockDocument.querySelector;
    expect(angular.Zb()).toBe(false);
  });

  test('should prioritize securityPolicy over csp attributes', () => {
    mockDocument.securityPolicy = { isActive: true };
    mockDocument.querySelector.mockReturnValue(true);
    expect(angular.Zb()).toBe(true);
  });

  test('should check for ng-csp before data-ng-csp', () => {
    mockDocument.querySelector.mockImplementation((selector) => {
      return selector === '[ng-csp]';
    });
    expect(angular.Zb()).toBe(true);
    expect(mockDocument.querySelector).toHaveBeenCalledTimes(1);
  });
});
