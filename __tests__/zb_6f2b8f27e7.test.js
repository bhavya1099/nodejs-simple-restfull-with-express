// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=zb_f89230d377
ROOST_METHOD_SIG_HASH=zb_6f2b8f27e7


*/

// ********RoostGPT********
const zb = require('../src/public/javascripts/library/angular.min.js').zb;

describe('zb function', () => {
  test('should return a function when called with two arguments', () => {
    const result = zb({}, () => {});
    expect(typeof result).toBe('function');
  });

  test('should return the second argument if it is not a function', () => {
    const result = zb({}, 'not a function');
    expect(result).toBe('not a function');
  });

  test('should return the second argument if it is a RegExp', () => {
    const regex = /test/;
    const result = zb({}, regex);
    expect(result).toBe(regex);
  });

  test('should return a function that applies the second argument with the first argument as context', () => {
    const context = { value: 42 };
    const fn = function() { return this.value; };
    const result = zb(context, fn);
    expect(result()).toBe(42);
  });

  test('should return a function that applies the second argument with additional arguments', () => {
    const fn = (a, b, c) => a + b + c;
    const result = zb(null, fn, 1, 2);
    expect(result(3)).toBe(6);
  });

  test('should return a function that applies the second argument with combined arguments', () => {
    const fn = (a, b, c, d) => a + b + c + d;
    const result = zb(null, fn, 1, 2);
    expect(result(3, 4)).toBe(10);
  });

  test('should return a function that calls the second argument without arguments if none provided', () => {
    const fn = jest.fn();
    const result = zb({}, fn);
    result();
    expect(fn).toHaveBeenCalledWith();
  });

  test('should preserve the context when calling the returned function', () => {
    const context = { value: 'test' };
    const fn = function() { return this.value; };
    const result = zb(context, fn);
    expect(result()).toBe('test');
  });

  test('should handle edge case with no arguments', () => {
    expect(() => zb()).toThrow();
  });

  test('should handle edge case with only one argument', () => {
    const result = zb({});
    expect(result).toBeUndefined();
  });

  test('should handle edge case with null as first argument', () => {
    const fn = () => 'test';
    const result = zb(null, fn);
    expect(result()).toBe('test');
  });

  test('should handle edge case with undefined as second argument', () => {
    const result = zb({}, undefined);
    expect(result).toBeUndefined();
  });
});
