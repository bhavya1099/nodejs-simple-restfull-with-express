// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=submitSaveForm_996a37cdd5
ROOST_METHOD_SIG_HASH=submitSaveForm_ade46eeeaf


*/

// ********RoostGPT********
const $ = require('jquery');
const { submitSaveForm, validateForm, handleAjaxSubmitResponse } = require('../../../src/public/javascripts/custom');

jest.mock('jquery');
jest.mock('../../../src/public/javascripts/custom', () => ({
  validateForm: jest.fn(),
  handleAjaxSubmitResponse: jest.fn()
}));

describe('submitSaveForm', () => {
  const ROOT_URL = 'http://example.com';
  
  beforeEach(() => {
    jest.clearAllMocks();
    global.ROOT_URL = ROOT_URL;
  });

  test('should submit form when validation passes', () => {
    validateForm.mockReturnValue(true);
    $.mockImplementation(() => ({
      val: jest.fn().mockReturnValueOnce('Test Title')
        .mockReturnValueOnce('Test Description')
        .mockReturnValueOnce('10.99')
    }));
    $.ajax = jest.fn().mockImplementation(({ success }) => success('success'));

    submitSaveForm();

    expect(validateForm).toHaveBeenCalled();
    expect($.ajax).toHaveBeenCalledWith({
      type: 'POST',
      url: `${ROOT_URL}/api/products`,
      data: {
        title: 'Test Title',
        description: 'Test Description',
        price: '10.99'
      },
      success: expect.any(Function)
    });
    expect(handleAjaxSubmitResponse).toHaveBeenCalledWith('success');
  });

  test('should not submit form when validation fails', () => {
    validateForm.mockReturnValue(false);

    const result = submitSaveForm();

    expect(validateForm).toHaveBeenCalled();
    expect($.ajax).not.toHaveBeenCalled();
    expect(result).toBe(false);
  });

  test('should handle AJAX error', () => {
    validateForm.mockReturnValue(true);
    $.mockImplementation(() => ({
      val: jest.fn().mockReturnValue('Test')
    }));
    $.ajax = jest.fn().mockImplementation(({ error }) => error('error'));

    submitSaveForm();

    expect(validateForm).toHaveBeenCalled();
    expect($.ajax).toHaveBeenCalled();
    expect(handleAjaxSubmitResponse).not.toHaveBeenCalled();
  });

  test('should use correct form values', () => {
    validateForm.mockReturnValue(true);
    $.mockImplementation((selector) => ({
      val: jest.fn().mockReturnValue(selector)
    }));
    $.ajax = jest.fn().mockImplementation(({ success }) => success('success'));

    submitSaveForm();

    expect($.ajax).toHaveBeenCalledWith(expect.objectContaining({
      data: {
        title: '#title',
        description: '#description',
        price: '#price'
      }
    }));
  });
});
