// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=lc_4029fff441
ROOST_METHOD_SIG_HASH=lc_f0c140959f


*/

// ********RoostGPT********
const { lc } = require('../../../src/public/javascripts/library/angular.min.js');

describe('lc function', () => {
  let mockB, mockMa, mockD, mockQ, mockXa, mockQa;

  beforeEach(() => {
    mockB = jest.fn();
    mockMa = jest.fn();
    mockD = jest.fn();
    mockQ = jest.fn();
    mockXa = jest.fn();
    mockQa = jest.fn();

    global.B = mockB;
    global.ma = mockMa;
    global.D = mockD;
    global.q = mockQ;
    global.Xa = mockXa;
    global.Qa = mockQa;
    global.Fb = jest.fn(msg => new Error(msg));
  });

  test('throws error when d is defined', () => {
    mockB.mockReturnValue(true);
    expect(() => lc({}, {}, {}, {})).toThrow('offargs');
  });

  test('handles case when a is not defined', () => {
    mockB.mockReturnValue(false);
    mockMa.mockReturnValueOnce({}).mockReturnValueOnce(() => {});
    mockD.mockReturnValue(true);

    lc({}, undefined, {}, undefined);

    expect(mockQ).toHaveBeenCalled();
  });

  test('handles case when a is a string', () => {
    mockB.mockReturnValue(false);
    mockMa.mockReturnValueOnce({}).mockReturnValueOnce(() => {});
    mockD.mockReturnValue(false);

    lc({}, 'event1 event2', {}, undefined);

    expect(mockQ).toHaveBeenCalled();
  });

  test('handles case when c is defined', () => {
    mockB.mockReturnValue(false);
    mockMa.mockReturnValueOnce({event1: [], event2: []}).mockReturnValueOnce(() => {});
    mockD.mockReturnValueOnce(false).mockReturnValueOnce(true);

    lc({}, 'event1 event2', () => {}, undefined);

    expect(mockXa).toHaveBeenCalledTimes(2);
    expect(mockQa).not.toHaveBeenCalled();
  });

  test('handles case when c is not defined', () => {
    mockB.mockReturnValue(false);
    mockMa.mockReturnValueOnce({event1: [], event2: []}).mockReturnValueOnce(() => {});
    mockD.mockReturnValueOnce(false).mockReturnValueOnce(false);

    lc({}, 'event1 event2', undefined, undefined);

    expect(mockXa).not.toHaveBeenCalled();
    expect(mockQa).toHaveBeenCalledTimes(2);
  });
});
