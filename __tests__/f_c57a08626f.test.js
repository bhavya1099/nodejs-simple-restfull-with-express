// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=f_e70e1d1b0f
ROOST_METHOD_SIG_HASH=f_c57a08626f


*/

// ********RoostGPT********
const f = require('../../../src/public/javascripts/library/angular-resource.min.js').f;

describe('f function', () => {
  let mockD;

  beforeEach(() => {
    mockD = jest.fn();
    global.D = mockD;
  });

  test('should call D function with provided argument and this context', () => {
    const arg = { key: 'value' };
    const context = {};
    f.call(context, arg);
    expect(mockD).toHaveBeenCalledWith(arg, context);
  });

  test('should call D function with empty object if no argument is provided', () => {
    const context = {};
    f.call(context);
    expect(mockD).toHaveBeenCalledWith({}, context);
  });

  test('should preserve this context when called as a constructor', () => {
    const instance = new f();
    expect(mockD).toHaveBeenCalledWith({}, instance);
  });

  test('should handle null argument', () => {
    const context = {};
    f.call(context, null);
    expect(mockD).toHaveBeenCalledWith({}, context);
  });

  test('should handle undefined argument', () => {
    const context = {};
    f.call(context, undefined);
    expect(mockD).toHaveBeenCalledWith({}, context);
  });

  test('should handle non-object argument', () => {
    const context = {};
    f.call(context, 42);
    expect(mockD).toHaveBeenCalledWith({}, context);
  });

  test('should not modify the original argument object', () => {
    const arg = { key: 'value' };
    const originalArg = { ...arg };
    f(arg);
    expect(arg).toEqual(originalArg);
  });
});
