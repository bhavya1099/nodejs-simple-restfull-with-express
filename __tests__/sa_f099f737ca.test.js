// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=sa_ddcb678b84
ROOST_METHOD_SIG_HASH=sa_f099f737ca


*/

// ********RoostGPT********
const sa = require('../../../src/public/javascripts/library/angular.min.js').sa;

describe('sa function', () => {
  test('should return "undefined" when input is undefined', () => {
    expect(sa(undefined)).toBe('undefined');
  });

  test('should stringify object without pretty printing', () => {
    const obj = { key: 'value' };
    expect(sa(obj)).toBe('{"key":"value"}');
  });

  test('should stringify object with pretty printing when second argument is true', () => {
    const obj = { key: 'value' };
    expect(sa(obj, true)).toBe('{\n  "key": "value"\n}');
  });

  test('should stringify array without pretty printing', () => {
    const arr = [1, 2, 3];
    expect(sa(arr)).toBe('[1,2,3]');
  });

  test('should stringify array with pretty printing when second argument is true', () => {
    const arr = [1, 2, 3];
    expect(sa(arr, true)).toBe('[\n  1,\n  2,\n  3\n]');
  });

  test('should handle null input', () => {
    expect(sa(null)).toBe('null');
  });

  test('should handle boolean input', () => {
    expect(sa(true)).toBe('true');
    expect(sa(false)).toBe('false');
  });

  test('should handle number input', () => {
    expect(sa(42)).toBe('42');
    expect(sa(3.14)).toBe('3.14');
  });

  test('should handle string input', () => {
    expect(sa('test')).toBe('"test"');
  });

  test('should handle complex nested objects', () => {
    const complex = { a: 1, b: { c: [1, 2, 3], d: { e: 'f' } } };
    expect(sa(complex)).toBe('{"a":1,"b":{"c":[1,2,3],"d":{"e":"f"}}}');
    expect(sa(complex, true)).toBe('{\n  "a": 1,\n  "b": {\n    "c": [\n      1,\n      2,\n      3\n    ],\n    "d": {\n      "e": "f"\n    }\n  }\n}');
  });

  test('should handle circular references', () => {
    const circular = { a: 1 };
    circular.b = circular;
    expect(() => sa(circular)).toThrow();
  });
});
